@using VMS.Application.ViewModels;

<section class="row justify-content-center">
    <div class="act-filter col-10 px-0">
        <div class="d-flex mb-4">
            <div class="act-filter__type d-flex justify-content-center">
                <div class="act-filter__type__child d-flex justify-content-center align-items-center me-4">
                    <input type="checkbox" id="md1" class="d-flex justify-content-center align-items-center me-2">
                    <label for="md1">Virtual</label>
                </div>
                <div class="act-filter__type__child d-flex justify-content-center align-items-center me-4">
                    <input type="checkbox" id="md2" class="d-flex justify-content-center align-items-center me-2">
                    <label for="md2">Actual</label>
                </div>
                <div class="act-filter__type__child d-flex justify-content-center align-items-center">
                    <input type="checkbox" id="md3" class="d-flex justify-content-center align-items-center me-2">
                    <label for="md3" class="act-filter__type__child--red d-flex justify-content-center align-items-center">
                        COVID-19
                        <span class="material-icons-outlined">
                            coronavirus
                        </span>
                    </label>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between flex-wrap">
            <div class="filter-item position-relative mb-4">
                <input @onclick="ToggleCityDropdown" @onfocusout="CloseCityDropdown" class="filter-item__btn filter-item__btn--lmtext-1 @(isFilterCity ? "bg-grey" : "")" placeholder="@cityChoosenValue" readonly />
                <div @onclick:preventDefault class="filter-item__dropdown" style="display: @(isCityShow ? "block" : "none")">
                    <ul>
                        @if (provinces is not null)
                        {
                            @foreach (var province in provinces)
                            {
                                <li @onmousedown="() => ChooseCityValue(province.Name)">@province.Name</li>
                            }
                        }
                    </ul>
                </div>
                <span class="material-icons-outlined position-absolute pe-none">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <input @onclick="ToggleDistrictDropdown" @onfocusout="CloseDistrictDropdown" class="filter-item__btn filter-item__btn--lmtext-1 @(isFilterDistrict ? "bg-grey" : "")" placeholder="@districtChoosenValue" readonly />
                <div @onclick:preventDefault class="filter-item__dropdown" style="display: @(isDistrictShow ? "block" : "none")">
                    <ul>
                        @if (districts is not null)
                        {
                            @foreach (var province in districts)
                            {
                                <li @onmousedown="() => ChooseDistrictValue(province.Name)">@province.Name</li>
                            }
                        }
                    </ul>
                </div>
                <span class="material-icons-outlined position-absolute pe-none">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <div @onclick="ShowAreasPopupAsync" class="filter-item__btn filter-item__btn--lmtext-1 @(areas.Count != 0 ? "bg-grey" : "")">Lĩnh vực</div>
                <span class="material-icons-outlined position-absolute">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <div @onclick="ShowSkillsPopupAsync" class="filter-item__btn filter-item__btn--lmtext-1 @(skills.Count != 0 ? "bg-grey" : "")">Kỹ năng</div>
                <span class="material-icons-outlined position-absolute">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <input @onclick="ToggleLevelDropdown" @onfocusout="CloseLevelDropdown" class="filter-item__btn filter-item__btn--lmtext-1 @(isFilterLevel ? "bg-grey" : "")" placeholder="@levelChoosenValue" readonly />
                <div @onclick:preventDefault class="filter-item__dropdown filter-item__dropdown--fit-content" style="display: @(isLevelShow ? "block" : "none")">
                    <ul>
                        @if (levels is not null)
                        {
                            @foreach (var level in levels)
                            {
                                <li @onmousedown="() => ChooseLevelValue(level)">@level.Name</li>
                            }
                        }
                    </ul>
                </div>
                <span class="material-icons-outlined position-absolute pe-none">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <input @onclick="ToggleOrganizationDropdown" @onfocusout="CloseOrganizationDropdown" class="filter-item__btn filter-item__btn--lmtext-1 @(isFilterOrganization ? "bg-grey" : "")" placeholder="@organizationChoosenValue" readonly />
                <div @onclick:preventDefault class="filter-item__dropdown" style="display: @(isOrganizationShow ? "block" : "none")">
                    <ul>
                        @if (organizations is not null)
                        {
                            @foreach (var organization in organizations)
                            {
                                <li @onmousedown="() => ChooseOrganizationValue(organization.Name)">@organization.Name</li>
                            }
                        }
                    </ul>
                </div>
                <span class="material-icons-outlined position-absolute pe-none">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <input @onclick="ToggleActTypeDropdown" @onfocusout="CloseActTypeDropdown" class="filter-item__btn filter-item__btn--lmtext-1 @(isFilterActType ? "bg-grey" : "")" placeholder="@acttypeChoosenValue" readonly />
                <div @onclick:preventDefault class="filter-item__dropdown filter-item__dropdown--fit-content" style="display: @(isActTypeShow ? "block" : "none")">
                    <ul>
                        @if (acttypes is not null)
                        {
                            @foreach (var acttype in acttypes)
                            {
                                <li @onmousedown="() => ChooseActTypeValue(acttype)">@acttype.Name</li>
                            }
                        }
                    </ul>
                </div>
                <span class="material-icons-outlined position-absolute pe-none">
                    expand_more
                </span>
            </div>

            <div class="filter-item position-relative mb-4">
                <AntDesign.DatePicker Picker="@AntDesign.DatePickerType.Month" @bind-Value="@Value" DefaultValue="DateTime.Now" Class="pe-1" Style="@(isFilterMonth ? "background-color: #f3f3f3":"")" OnChange="ChooseMonthValue" Format="MM/yyyy" />
            </div>
        </div>

        <div class="act-filter__btn d-flex justify-content-start align-items-center mb-4 text-center">
            <button class="btn act-filter__btn--green px-4 py-1 me-3">Lọc</button>
            <button class="act-filter__btn--clear">Xóa lọc</button>
        </div>
    </div>
</section>

@code {
    private bool isOrganizationShow;
    private bool isCityShow;
    private bool isDistrictShow;
    private bool isLevelShow;
    private bool isActTypeShow;
    private bool isFilterDistrict;
    private bool isFilterActType;
    private bool isFilterCity;
    private bool isFilterLevel;
    private bool isFilterOrganization;
    private bool isFilterMonth;
    private string cityChoosenValue = "Tỉnh/Thành phố";
    private string districtChoosenValue = "Quận/Huyện";
    private string organizationChoosenValue = "Tổ chức";
    private string levelChoosenValue = "Cấp";
    private string acttypeChoosenValue = "Loại hoạt động";
    private string dateChoosenValue = "Tháng, năm";
    [Parameter] public DateTime Value { get; set; }
    private List<AreaViewModel> areas = new();
    private List<SkillViewModel> skills = new();

    [CascadingParameter]
    public IModalService Modal { get; set; }

    protected override void OnInitialized()
    {
        for (int i = 0; i < 10; i++)
        {
            provinces.Add(new FakeData()
            {
                Name = "TP.HCM",
            });

            districts.Add(new FakeData()
            {
                Name = "Quận 6",
            });

            organizations.Add(new FakeData()
            {
                Name = "Tinh nguyen",
            });
        }

    }
    private List<FakeData> provinces = new();
    private List<FakeData> districts = new();
    private List<FakeData> organizations = new();

    private List<FakeData> acttypes = new()
    {
        new FakeData() { Name = "Đang diễn ra" },
        new FakeData() { Name = "Đã diễn ra" },
        new FakeData() { Name = "Đã đóng đăng ký" },
    };
    private void ChooseActTypeValue(FakeData acttype)
    {
        acttypeChoosenValue = acttype.Name;
        isFilterActType = true;
    }

    private List<FakeData> levels = new()
    {
        new FakeData() { Name = "Ban Chuyên môn" },
        new FakeData() { Name = "Khoa/Viện/KTX" },
        new FakeData() { Name = "CLB/Đội/Nhóm" },
    };

    private void ChooseLevelValue(FakeData level)
    {
        levelChoosenValue = level.Name;
        isFilterLevel = true;
    }

    private class FakeData
    {
        public string Name { get; set; }
    }

    private void ToggleCityDropdown()
    {
        isCityShow = !isCityShow;
    }

    private void CloseCityDropdown()
    {
        isCityShow = false;
    }

    private void ToggleDistrictDropdown()
    {
        isDistrictShow = !isDistrictShow;
    }

    private void CloseDistrictDropdown()
    {
        isDistrictShow = false;
    }

    private void ToggleOrganizationDropdown()
    {
        isOrganizationShow = !isOrganizationShow;
    }

    private void CloseOrganizationDropdown()
    {
        isOrganizationShow = false;
    }

    private void ToggleLevelDropdown()
    {
        isLevelShow = !isLevelShow;
    }

    private void CloseLevelDropdown()
    {
        isLevelShow = false;
    }

    private void ToggleActTypeDropdown()
    {
        isActTypeShow = !isActTypeShow;
    }

    private void CloseActTypeDropdown()
    {
        isActTypeShow = false;
    }

    void ChooseCityValue(string name)
    {
        cityChoosenValue = name;
        isFilterCity = true;
    }

    void ChooseDistrictValue(string name)
    {
        districtChoosenValue = name;
        isFilterDistrict = true;
    }

    void ChooseOrganizationValue(string name)
    {
        organizationChoosenValue = name;
        isFilterOrganization = true;
    }

    void ChooseMonthValue()
    {
        isFilterMonth = true;
    }

    private async Task ShowAreasPopupAsync()
    {
        var parameters = new ModalParameters();
        parameters.Add("ChoosenAreasList", areas);

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };

        await Modal.Show<VMS.Pages.ActivitySearchPage.AreasPopup>("", parameters, options).Result;
    }

    private async Task ShowSkillsPopupAsync()
    {
        var skillsParameter = new ModalParameters();
        skillsParameter.Add("ChoosenSkillsList", skills);

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };

        await Modal.Show<VMS.Pages.ActivitySearchPage.SkillsPopup>("", skillsParameter, options).Result;
    }
}
