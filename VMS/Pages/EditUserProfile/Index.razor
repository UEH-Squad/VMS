@attribute [Route(Routes.EditUserProfile)]
@using System.ComponentModel.DataAnnotations;
@using VMS.Application.ViewModels;
@using VMS.Common.CustomValidations;
@inject IJSRuntime JSRuntinme;

<div class="my-editProfile">
    <div class="container">
        <div class="row">
            <div class="col-10 mx-auto">
                <h1 class="editProfile__title">Chỉnh sửa <span>thông tin cá nhân</span></h1>
                <div class="editProfile__logo text-center my-5">
                    <img src="img/RelatedActivities/2nd-activity.png" alt="">
                </div>
                <EditForm Model="@user" Context="CurrentEditContext" class="editProfile__form">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row form-item">
                        <p class="col-3 form-text">Họ và tên <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <InputText @bind-Value="@user.FullName" class="form-control form-control--disable" disabled="true" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Khóa <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <InputText @bind-Value="@user.SchoolYear" class="form-control form-control--disable" disabled="true" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Lớp <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <div class="d-none">@CurrentEditContext.FieldCssClass(() => user.Class)</div>
                            <InputText @bind-Value="@user.Class" class="form-control" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Khoa <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <div class="dropdown">
                      
                                <span class="material-icons-outlined"> arrow_drop_down </span>
                                <input class="form-control my-form-department" readonly="readonly" placeholder="@departmentChoosenValue" data-bs-toggle="dropdown" />

                                <ul class="dropdown-menu">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        int id = i;
                                        <li @onclick="()=>ChooseDepartmentValue(id)">@nameDepartmentValue @id</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Mã số sinh viên <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <InputText @bind-Value="@user.IdStudent" class="form-control form-control--disable" disabled="true" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Ngày sinh <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <div class="d-none">@CurrentEditContext.FieldCssClass(() => user.Birthday)</div>
                            <InputText @bind-Value="@user.Birthday" class="form-control" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Email UEH <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <InputText @bind-Value="@user.EmailUEH" class="form-control form-control--disable" disabled="true" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Email nhận thông báo <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <div class="d-none">@CurrentEditContext.FieldCssClass(() => user.EmailGetNoti)</div>
                            <InputText @bind-Value="@user.EmailGetNoti" class="form-control" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Điện thoại <span>(*)</span></p>
                        <div class="col-9 px-0">
                            <div class="d-none">@CurrentEditContext.FieldCssClass(() => user.Phone)</div>
                            <InputText @bind-Value="@user.Phone" class="form-control" />
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Địa chỉ <span>(*)</span></p>
                        <div class="col-9 d-flex flex-row flex-wrap flex-xl-nowrap" style="padding:0">
                            <VMS.Pages.Organization.Activities.CascadingAddressPicker />
                            <div class="d-none">@CurrentEditContext.FieldCssClass(() => user.Address)</div>
                            <InputText @bind-Value="@user.Address" class="form-control ms-xl-2 my-address-textbox" style="width:auto" placeholder="Nhập số nhà, tên đường" />
                        </div>
                    </div>

                    @*Carousel lĩnh vực*@
                    <div class="row form-item">
                        <p class="col-3 form-text">Lĩnh vực <span>(*)</span></p>
                        <div class="col-9 form-field ">
                            <div class="d-flex">
                                @if (areas.Count < 5)
                                {
                                    width = areas.Count * 20;
                                    classWidth = "w-" + width;
                                }

                                <div class="@(areas.Count>4 ?"owl-carousel owl-theme editProfile__carousel w-80" :"d-flex editProfile__NoCarousel ") @classWidth ">
                                    @foreach (var item in areas)
                                    {
                                        <div class="form-field-item item @(areas.Count>4 ?"" :"item-NoCaroesel mx-auto")">
                                            <i class="material-icons">@item.Icon</i>
                                            <span>@item.Name</span>
                                        </div>
                                    }
                                </div>

                                <div class="form-field-item  item-add ">
                                    <i class="material-icons-outlined icon-add" @onclick="ShowAreasModal">add</i>
                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Kỹ năng <span>(*)</span></p>
                        <div class="col-9 position-relative p-0">
                            <Typeahead SearchMethod="SearchSkills"
                                       PlaceHolderText="Lựa chọn kỹ năng"
                                       @bind-Values="user.Skills"
                                       EnablePopup="true"
                                       ShowPopUp="ShowSkillsPopup"
                                       class="col-5">
                                <SelectedTemplate Context="target">
                                    @target.Name
                                </SelectedTemplate>
                                <ResultTemplate Context="target">
                                    @target.Name
                                </ResultTemplate>
                            </Typeahead>
                        </div>
                    </div>

                    <div class="row form-item">
                        <p class="col-3 form-text">Châm ngôn</p>
                        <div class="col-9 position-relative px-0">
                            <div class="d-none">@CurrentEditContext.FieldCssClass(() => user.Maxim)</div>
                            <div class="col-8 px-0 w-100">
                                <InputTextareaOnInput MaxLength="@maxWord" @bind-Value="user.Maxim" class="form-input mx-0 form-control form-control-maxim" />
                                <p class="countWord text-end mb-0">@CountWord()/@maxWord</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-8 ms-auto from__btn">
                            <a href="@Routes.User" class="btn from__btn-cancel text-decoration-none">Hủy</a>
                            @if (CurrentEditContext.IsModified() || file != null)
                            {
                                <button @onclick="(() => ShowConfirmPopUp())" type="submit" class="btn from__btn-submit ms-5 d-inline-block blue-btn ">Hoàn tất</button>
                            }
                            else
                            {
                                <div class="btn from__btn-submit ms-5 d-inline-block cursor">Hoàn tất</div>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] public IModalService Modal { get; set; }

    public class User
    {

        public string FullName { get; set; }

        public string SchoolYear { get; set; }

        public string Class { get; set; }

        public string Department { get; set; }

        public string IdStudent { get; set; }

        public string Birthday { get; set; }

        public string EmailUEH { get; set; }

        public string EmailGetNoti { get; set; }

        public string Phone { get; set; }

        public string Maxim { get; set; }

        public string Address { get; set; }

        [RequiredHasItems]
        public IList<SkillViewModel> Skills { get; set; } = new List<SkillViewModel>();
    }

    private User user = new User()
    {
        FullName = "Minh Kha Bui",
        SchoolYear = "K45",
        IdStudent = "31191025985",
        EmailUEH = "youth.bit@gmail.com",

        Class = "ST001",
        Phone = "0968790812",
        Birthday = "24/07/2001",
        EmailGetNoti = "buiminhkha24072001@gmail.com",
        Maxim = "Nợ mẹ một nàng dâu."
    };

    private IBrowserFile file;

    private int maxWord = 300;

    private int CountWord()
    {
        int count = user.Maxim.Length;
        return count;
    }

    private void FileChanged(InputFileChangeEventArgs file)
    {
        this.file = file.File;

    }

    private List<AreaViewModel> areas = new List<AreaViewModel>();
    private async Task ShowAreasModal()
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        var areasParameter = new ModalParameters();
        areasParameter.Add("choosenAreasList", areas);
        var areasModal = Modal.Show<ActivitySearchPage.AreasPopup>("", areasParameter, options);
        await areasModal.Result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (areas.Count > 3)
        {
            await JSRuntinme.InvokeVoidAsync("vms.EditProfileCarousel");
        }
    }
    private async Task ShowSkillsPopup()
        {
            var parameters = new ModalParameters();
            parameters.Add("ChoosenSkillsList", user.Skills);

            await ShowModalAsync(typeof(ActivitySearchPage.SkillsPopup), parameters);
            StateHasChanged();
        }
    private async Task ShowModalAsync(Type type, ModalParameters parameters)
    {
        ModalOptions options = new()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };

        await Modal.Show(type, "", parameters, options).Result;
    }

    private string departmentChoosenValue = "Lựa chọn Khoa";

    private string nameDepartmentValue = "Khoa Công nghệ thông tin Kinh doanh";

    void ChooseDepartmentValue(int id)
    {
        departmentChoosenValue = nameDepartmentValue + " " + (id).ToString();
    }


    async Task ShowConfirmPopUp()
    {
        var options = new ModalOptions()
        {

            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal.Show<ConfirmNotification>("", options);
    }

    private int width;
    private string classWidth = "";
}