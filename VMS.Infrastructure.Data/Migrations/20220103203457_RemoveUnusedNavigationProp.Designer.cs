// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using VMS.Infrastructure.Data.Context;

namespace VMS.Infrastructure.Data.Migrations
{
    [DbContext(typeof(VmsDbContext))]
    [Migration("20220103203457_RemoveUnusedNavigationProp")]
    partial class RemoveUnusedNavigationProp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VMS.Domain.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Commission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MemberQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Mission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrgId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Requirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Targets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("AreaId");

                    b.HasIndex("OrgId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivityAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("AddressPathId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AddressPathId");

                    b.ToTable("ActivityAddresses");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivityImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityImages");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivitySkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("SkillId");

                    b.ToTable("ActivitySkills");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivityTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityTargets");
                });

            modelBuilder.Entity("VMS.Domain.Models.AddressPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentPathId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentPathId");

                    b.ToTable("AddressPaths");
                });

            modelBuilder.Entity("VMS.Domain.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e570",
                            ConcurrencyStamp = "d8a35366-4fcc-494e-ab65-3d515e0b1990",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e571",
                            ConcurrencyStamp = "903be336-8422-4da4-b84e-1a877aa0816f",
                            Name = "Organization",
                            NormalizedName = "Organization"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e572",
                            ConcurrencyStamp = "d6b0bdad-dbd4-4458-a457-408f0917bbb5",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("VMS.Domain.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#18A0FB");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#18A0FB",
                            Icon = "people_outline",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Cộng đồng"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#18A0FB",
                            Icon = "pan_tool",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Hỗ trợ"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#18A0FB",
                            Icon = "import_contacts",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Giáo dục"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#18A0FB",
                            Icon = "format_shapes",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Kỹ thuật"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#18A0FB",
                            Icon = "local_hospital",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Sức khỏe"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#18A0FB",
                            Icon = "drive_eta",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Phương tiện"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#18A0FB",
                            Icon = "wb_sunny",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Môi trường"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#18A0FB",
                            Icon = "directions_bike",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Thể thao"
                        },
                        new
                        {
                            Id = 9,
                            Color = "#18A0FB",
                            Icon = "notifications_active",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Khẩn cấp"
                        },
                        new
                        {
                            Id = 10,
                            Color = "#18A0FB",
                            Icon = "calendar_today",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Sự kiện"
                        },
                        new
                        {
                            Id = 11,
                            Color = "#18A0FB",
                            Icon = "home",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Chuyển nhà"
                        },
                        new
                        {
                            Id = 12,
                            Color = "#18A0FB",
                            Icon = "computer",
                            IsDeleted = false,
                            IsPinned = false,
                            Name = "Công nghệ"
                        },
                        new
                        {
                            Id = 13,
                            Color = "#F14747",
                            Icon = "coronavirus",
                            IsDeleted = false,
                            IsPinned = true,
                            Name = "COVID-19"
                        });
                });

            modelBuilder.Entity("VMS.Domain.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Khoa Luật"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Khoa Kế toán"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Khoa Kinh tế"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Khoa Khoa học xã hội"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Khoa Ngân hàng"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Khoa Ngoại ngữ"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Khoa Quản lý nhà nước"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Khoa Quản trị"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Khoa Tài chính"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Khoa Tài chính công"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Khoa Công nghệ thông tin kinh doanh"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Khoa Kinh doanh quốc tế - Marketing"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Khoa Toán - Thống kê"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Viện Du lịch"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Viện Đào tạo quốc tế"
                        });
                });

            modelBuilder.Entity("VMS.Domain.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("VMS.Domain.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReportUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequest")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("VMS.Domain.Models.ImageReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("ImageReports");
                });

            modelBuilder.Entity("VMS.Domain.Models.ReasonReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("ReasonReports");
                });

            modelBuilder.Entity("VMS.Domain.Models.Recruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCommit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Recruitments");
                });

            modelBuilder.Entity("VMS.Domain.Models.RecruitmentRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrgRating")
                        .HasColumnType("bit");

                    b.Property<double>("Rank")
                        .HasColumnType("float");

                    b.Property<int>("RecruitmentId")
                        .HasColumnType("int");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("RecruitmentRatings");
                });

            modelBuilder.Entity("VMS.Domain.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Kiến thức chuyên ngành"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Kỹ năng mềm"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Hoạch định tài chính"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Quản lý thời gian"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Chỉnh sửa/Thiết kế hình ảnh/Video"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Thể lực tốt"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Viết Proposal/Kịch bản/Content"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Lập trình"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Xây dựng website"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Lái xe"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Luật",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Kế toán/Kiểm toán",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Marketing",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Quản trị",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Tài chính",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Ngân hàng",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            Name = "Ngoại ngữ",
                            ParentSkillId = 1
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            Name = "Làm việc nhóm",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            Name = "Tư duy Logic",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            Name = "Xây dựng kế hoạch",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 21,
                            IsDeleted = false,
                            Name = "Giao tiếp & Ứng xử",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 22,
                            IsDeleted = false,
                            Name = "Giải quyết vấn đề",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 23,
                            IsDeleted = false,
                            Name = "Đồng cảm & Sẻ chia",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 24,
                            IsDeleted = false,
                            Name = "Quan sát & Lắng nghe",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 25,
                            IsDeleted = false,
                            Name = "Tìm kiếm & Xử lý thông tin",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 26,
                            IsDeleted = false,
                            Name = "Kiểm soát cảm xúc",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 27,
                            IsDeleted = false,
                            Name = "Kiên nhẫn",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 28,
                            IsDeleted = false,
                            Name = "Chăm chỉ",
                            ParentSkillId = 2
                        },
                        new
                        {
                            Id = 29,
                            IsDeleted = false,
                            Name = "Siêng năng",
                            ParentSkillId = 2
                        });
                });

            modelBuilder.Entity("VMS.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NotifiedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "efdef68d-8c79-48af-b5c1-7dec37c9e108",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hsv.ueh@ueh.edu.vn",
                            EmailConfirmed = true,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "hsv.ueh@ueh.edu.vn",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAENOCkuhDoXVasyOW/yiWYZsuHya4BHwrpK54HLN41ALoOUoRwqqMMJXGnMHiWejy9w==",
                            PhoneNumberConfirmed = false,
                            Rank = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("VMS.Domain.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressPathId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressPathId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("VMS.Domain.Models.UserArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAreas");
                });

            modelBuilder.Entity("VMS.Domain.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e570"
                        });
                });

            modelBuilder.Entity("VMS.Domain.Models.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("VMS.Domain.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VMS.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VMS.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VMS.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VMS.Domain.Models.Activity", b =>
                {
                    b.HasOne("VMS.Domain.Models.User", "Approver")
                        .WithMany("ActivityApprovals")
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("VMS.Domain.Models.Area", "Area")
                        .WithMany("Activities")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "Organizer")
                        .WithMany("Activities")
                        .HasForeignKey("OrgId");

                    b.Navigation("Approver");

                    b.Navigation("Area");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivityAddress", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany("ActivityAddresses")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.AddressPath", "AddressPath")
                        .WithMany("ActivityAddresses")
                        .HasForeignKey("AddressPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AddressPath");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivityImage", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany("ActivityImages")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivitySkill", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany("ActivitySkills")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.Skill", "Skill")
                        .WithMany("ActivitySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("VMS.Domain.Models.ActivityTarget", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany("ActivityTargets")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("VMS.Domain.Models.AddressPath", b =>
                {
                    b.HasOne("VMS.Domain.Models.AddressPath", "PreviousPath")
                        .WithMany("SubPaths")
                        .HasForeignKey("ParentPathId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PreviousPath");
                });

            modelBuilder.Entity("VMS.Domain.Models.Favorite", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany("Favorites")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.Feedback", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.ImageReport", b =>
                {
                    b.HasOne("VMS.Domain.Models.Feedback", "Feedback")
                        .WithMany("ImageReports")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("VMS.Domain.Models.ReasonReport", b =>
                {
                    b.HasOne("VMS.Domain.Models.Feedback", "Feedback")
                        .WithMany("ReasonReports")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("VMS.Domain.Models.Recruitment", b =>
                {
                    b.HasOne("VMS.Domain.Models.Activity", "Activity")
                        .WithMany("Recruitments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("Recruitments")
                        .HasForeignKey("UserId");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.RecruitmentRating", b =>
                {
                    b.HasOne("VMS.Domain.Models.Recruitment", "Recruitment")
                        .WithMany("RecruitmentRatings")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recruitment");
                });

            modelBuilder.Entity("VMS.Domain.Models.Skill", b =>
                {
                    b.HasOne("VMS.Domain.Models.Skill", "ParentSkill")
                        .WithMany("SubSkills")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentSkill");
                });

            modelBuilder.Entity("VMS.Domain.Models.User", b =>
                {
                    b.HasOne("VMS.Domain.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("VMS.Domain.Models.UserAddress", b =>
                {
                    b.HasOne("VMS.Domain.Models.AddressPath", "AddressPath")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId");

                    b.Navigation("AddressPath");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.UserArea", b =>
                {
                    b.HasOne("VMS.Domain.Models.Area", "Area")
                        .WithMany("UserAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("UserAreas")
                        .HasForeignKey("UserId");

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.UserRole", b =>
                {
                    b.HasOne("VMS.Domain.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.UserSkill", b =>
                {
                    b.HasOne("VMS.Domain.Models.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VMS.Domain.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VMS.Domain.Models.Activity", b =>
                {
                    b.Navigation("ActivityAddresses");

                    b.Navigation("ActivityImages");

                    b.Navigation("ActivitySkills");

                    b.Navigation("ActivityTargets");

                    b.Navigation("Favorites");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("VMS.Domain.Models.AddressPath", b =>
                {
                    b.Navigation("ActivityAddresses");

                    b.Navigation("SubPaths");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("VMS.Domain.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("VMS.Domain.Models.Area", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UserAreas");
                });

            modelBuilder.Entity("VMS.Domain.Models.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VMS.Domain.Models.Feedback", b =>
                {
                    b.Navigation("ImageReports");

                    b.Navigation("ReasonReports");
                });

            modelBuilder.Entity("VMS.Domain.Models.Recruitment", b =>
                {
                    b.Navigation("RecruitmentRatings");
                });

            modelBuilder.Entity("VMS.Domain.Models.Skill", b =>
                {
                    b.Navigation("ActivitySkills");

                    b.Navigation("SubSkills");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("VMS.Domain.Models.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ActivityApprovals");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Recruitments");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserAreas");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
