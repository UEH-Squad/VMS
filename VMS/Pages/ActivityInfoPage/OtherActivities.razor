@inject IJSRuntime JSRuntinme
@inject IActivityService ActivityService
@inject IIdentityService IdentityService

@using VMS.Application.ViewModels
@using VMS.Application.Interfaces
@using VMS.Domain.Models

@if (otherActivities is not null && otherActivities.Count != 0)
{
    <section class="other-act">
        <div class="other-act__title">
            <h3>Hoạt động khác <span>của tổ chức</span></h3>
            <hr>
        </div>
        <div class="owl-carousel owl-theme">
            @foreach (var item in otherActivities)
            {
                @if (item.ActivityId != int.Parse(ActivityId))
                {
                    <div class="act__container__card" id="kiemtra">
                        <div class="act__container__card__img">
                            <img src="img/AcitivitiesInfo/ki-niem-tinh-nguyen-vien.jpg" alt="photo">
                            @*@if (!string.IsNullOrEmpty(item.ActivityBanner))
                            {
                                <img src="/img/@item.ActivityBanner" alt="photo"/>
                            }*@
                        </div>
                        <div class="act__container__card__desc">
                            <p>@item.ActivityName</p>
                        </div>
                        <div class="act__container__card__icon">
                            <div class="@(currentUser.Favorites.Any(f => f.ActivityId == item.ActivityId) ? "heart" : "heart-line")" @onclick="() => HandleFavorite(item.ActivityId)">
                                <span class="material-icons">favorite</span>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </section>
}

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntinme.InvokeVoidAsync("vms.OtherAct");
    }

    private ViewActivityViewModel activity;
    private List<OtherActivitiesViewModel> otherActivities;
    private User currentUser;

    [Parameter]
    public string ActivityId { get; set; }

    [Parameter]
    public string OrgId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var item = fakeData.FirstOrDefault(x => x.Id == id);
        if (item is not null)
            {
                item.IsFav = !item.IsFav;
            }
        
    }

    protected override async Task OnInitializedAsync()
    {
        fakeData.AddRange(Enumerable.Range(0,7).Select(x => new FakeData
        {
            currentUser.Favorites.Remove(favorite);
        }

        IdentityService.UpdateUser(currentUser);
    }

}