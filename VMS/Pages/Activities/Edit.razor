@attribute [Route(Routes.EditActivity + "/{id}")]
@attribute [Authorize]


@using Microsoft.AspNetCore.Hosting
@using System.IO
@using Microsoft.AspNetCore.Identity
@using VMS.Application.Interfaces
@using VMS.Application.Services
@using VMS.Application.ViewModels
@using VMS.Domain.Models

@inject IIdentityService IdentityService
@inject IAreaService AreaService
@inject ISkillService SkillService
@inject IActivityService ActivityService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@inject IUploadService UploadService

@if (activity is null || string.IsNullOrEmpty(activity.OrgId) || activity.OrgId != user.Id)
{
    <div class="alert alert-info">Không tìm thấy hoạt động..<a href="@Routes.Activities">Quay lại</a></div>
}
else
{
    <div class="alert alert-info"><a href="@Routes.ViewActivity/@Id" class="btn btn-success">Quay lại</a></div>
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="activity" OnValidSubmit="UpdateActivity">
                <div class="card card-body">
                    Tên hoạt động:
                    <InputText @bind-Value="@activity.Name" class="form-control" />
                </div>
                <div class="card card-body">
                    Lĩnh vực:
                    <InputSelect @bind-Value="@activity.AreaId" class="form-control">
                        <option value="0">Chọn lĩnh vực</option>
                        @if (areas is not null)
                        {
                            @foreach (var area in areas)
                            {
                                <option value="@area.Id">@area.Name</option>
                            }
                        }

                    </InputSelect>
                </div>
                <div class="card card-body">
                    Ngày bắt đầu:
                    <InputDate @bind-Value="@activity.StartDate" class="form-control" />
                </div>
                <div class="card card-body">
                    Ngày kết thúc:
                    <InputDate @bind-Value="@activity.EndDate" class="form-control" />
                </div>
                <div class="card card-body">
                    Địa chỉ:
                    <InputText @bind-Value="@activity.Address" class="form-control" />
                </div>
                <div class="card card-body">
                    Số lượng người tham gia:
                    <InputNumber @bind-Value="@activity.MemberQuantity" class="form-control" />
                </div>
                <div class="card card-body">
                    Mô tả:
                    <InputTextArea @bind-Value="@activity.Description" class="form-control"></InputTextArea>
                </div>
                <div class="card card-body">
                    Nhiệm vụ:
                    <InputTextArea @bind-Value="@activity.Mission" class="form-control"></InputTextArea>
                </div>
                <div class="card card-body">
                    <InputCheckbox @bind-Value="@activity.IsVirtual" />  Is Virtual?
                </div>
                @if (skills is not null)
                    {
                        <div class="card card-body">
                            Skill:
                            @foreach (var skill in skills)
                            {
                                <label for="@skill.Name">
                                    @if (activity.Skills.FirstOrDefault(s => s.Id == skill.Id) == null)
                                    {
                                        <input type="checkbox" id="@skill.Name" @onchange="@((e) => CheckboxChanged(e, skill))" /> @skill.Name
                                    }
                                    else
                                    {
                                        <input type="checkbox" id="@skill.Name" checked="checked" @onchange="@((e) => CheckboxChanged(e, skill))" /> @skill.Name
                                    }
                                </label>
                            }
                        </div>
                    }
                <div class="card card-body">
                    Requirement:
                    <InputTextArea @bind-Value="@activity.Requirement" class="form-control"></InputTextArea>
                </div>
                <div class="card card-body">
                    Website:
                    <InputText @bind-Value="@activity.Website" class="form-control" />
                 </div>
                <div class="card card-body">
                    Banner:
                    <InputFile OnChange="OnInputFileChange" />
                    @if (!string.IsNullOrEmpty(messageFileWarning))
                    {
                        <span style="color: red">@messageFileWarning</span>
                    }
                    @if (!string.IsNullOrEmpty(imageDataUri))
                    {
                        <img src="@imageDataUri"/>
                    }
                </div>
                <div class="card card-body">
                    <input type="submit" value="Update" class="btn btn-primary" />
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }
    private CreateActivityViewModel activity;
    private IdentityUser user;
    private List<Skill> skills;
    private List<Area> areas;
    private string messageFileWarning;
    private string imageDataUri;
    private IBrowserFile browserFile;

    protected override async Task OnInitializedAsync()
    {
        activity = await ActivityService.GetCreateActivityViewModel(int.Parse(Id));
        skills = await SkillService.GetAllSkills();
        areas = await AreaService.GetAllAreas();
        user = IdentityService.GetCurrentUser();
        imageDataUri = "/img/" + activity.Banner;
    }

    private void CheckboxChanged(ChangeEventArgs e, object obj)
    {
        if (obj.GetType() == typeof(Skill))
        {
            Skill skill = activity.Skills.FirstOrDefault(s => s.Id == ((Skill)obj).Id);
            if (skill is null)
            {
                activity.Skills.Add((Skill)obj);
            }
            else
            {
                activity.Skills.Remove(skill);
            }
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.File.ContentType != "image/jpeg")
        {
            messageFileWarning = $"File không đúng định dạng..";
            this.StateHasChanged();
            return;
        }
        else
        {
            messageFileWarning = "";
            browserFile = e.File;
            imageDataUri = await UploadService.GetDataUri(browserFile);
        }
    }

    private async Task UpdateActivity()
    {
        // check area
        if (areas.FirstOrDefault(a => a.Id == activity.AreaId) is null)
        {
            return;
        }

        // save banner
        if (browserFile is not null)
        {
            if (!string.IsNullOrEmpty(activity.Banner))
            {
                UploadService.RemoveImage(activity.Banner);
            }
            activity.Banner = await UploadService.SaveImage(browserFile);
        }

        await ActivityService.UpdateActivity(activity, int.Parse(Id));

        NavigationManager.NavigateTo(Routes.ViewActivity + "/" + Id);
    }
}
