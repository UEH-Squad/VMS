@inject IJSRuntime JsRuntime
<div class="container__list-result">
    <SearchResult />
    <div class="container-member">
        @if (pagedResult != null && pagedResult.Results.Length != 0)
        {
            @foreach (var item in pagedResult.Results)
            {
                <div class="container">
                    <div class="container-avatar">
                        <img src="@item.Avatar" alt="Avatar" class="member-avatar">
                    </div>
                    <div class="member">
                        <div class="member-name">
                            <p class="member-name1">@item.MemberName</p>
                            <p class="member-name2">@item.ShortDescription</p>
                        </div>
                        <Stars @bind-StarRating="item.StarStyle" />
                        <div class="member-comment">
                            @*Pop-up để comment*@
                            <button @onclick="@(()=>ShowCommentPopUp())" id="popup-comment_icon">
                                <span id="member-comment_icon" class="material-icons">comment</span>
                            </button>
                            <div class="member-comment_tooltip">Bạn có điều  gì muốn gửi gắm đến mình hong!</div>
                        </div>
                        <div class="member-report">
                            @*Pop-up để report*@
                            <button @onclick="@(()=>ShowReportPopUp())" id="popup-report_icon">
                                <span id="member-report_icon" class="material-icons">report_problem</span>
                            </button>
                            <div class="member-report_tooltip">Báo cáo xấu nếu mình vi phạm nhé!</div>
                        </div>
                    </div>
                </div>
            }
        }
        <div class="pagination-container">
            <Pager CurrentPage="@pagedResult.CurrentPage"
                   PageCount="@pagedResult.PageCount"
                   OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int StarRating { get; set; }

    /****Pagination****/
    private class FakeData
    {
        public int StarStyle { get; set; }
        public int RatingList { get; set; }
        public string Avatar { get; set; }
        public string MemberName { get; set; }
        public string ShortDescription { get; set; }
    }

    public abstract class PagedResultBase
    {
        public int CurrentPage { get; set; }
        public int PageCount { get; set; }
        public int PageSize { get; set; }
        public int RowCount { get; set; }
        public int FirstRowOnPage => Math.Min((CurrentPage - 1) * PageSize + 1, RowCount);
        public int LastRowOnPage => Math.Min(CurrentPage * PageSize, RowCount);
    }

    public class PagedResult<T> : PagedResultBase where T : class
    {
        public T[] Results { get; set; }
    }

    private PagedResult<FakeData> pagedResult;
    private int page = 1;

    protected override async Task OnInitializedAsync()
    {
        pagedResult = GetFakeData();
    }

    protected override void OnParametersSet()
    {
        if (StarRating != 0)
        {
            foreach (var item in pagedResult.Results)
            {
                item.StarStyle = StarRating;
            }
        }
    }

    private async Task HandlePageChanged()
    {
        pagedResult = GetFakeData();
        StateHasChanged();
        await Interop.ScrollToTop(JsRuntime);
    }

    /// <summary>
    /// Get fake data
    /// </summary>
    /// <param name="type">0 for volunteer list; 1 for rated one</param>
    /// <returns></returns>
    private PagedResult<FakeData> GetFakeData()
    {
        var result = new PagedResult<FakeData>();
        result.CurrentPage = page;
        result.RowCount = 200;
        result.PageSize = 20;
        result.PageCount = result.RowCount / result.PageSize;
        result.Results = Enumerable.Range(0, result.PageSize).Select(x => new FakeData
        {
            Avatar = "./img/RatingPage/Ellipse 28.png",
            MemberName = "Phạm Thị Ngọc Ánh",
            ShortDescription = "Thành viên vàng trong làng tình nguyện",
        }).ToArray();

        return result;
    }

    [CascadingParameter] public IModalService Modal1 { get; set; }
    async Task ShowCommentPopUp()
    {
        var options = new ModalOptions()
        {

            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal1.Show<PopUpComment>("", options);
    }

    [CascadingParameter] public IModalService Modal2 { get; set; }
    async Task ShowReportPopUp()
    {
        var options = new ModalOptions()
        {

            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal2.Show<PopUpReportMember>("", options);
    }

}
