@attribute [Route(Routes.HomePage)]

@using VMS.Domain.Models
@using VMS.Application.Interfaces
@using VMS.Application.ViewModels

@inject IJSRuntime JsRuntime
@inject IIdentityService IdentityService
@inject IActivityService UserWithActService

<VMS.Pages.Homepage.SloganAndVideo />
<VMS.Pages.Homepage.Filter />
<VMS.Pages.Homepage.Rank />
<section class="my-act">
    <div class="container-lg p-0 position-relative">
        <VMS.Pages.Homepage.RelatedActivities Title="Mới Nhất" Activities="@newestActivities" QueryString="?newest=true&nearest=true" />
        <VMS.Pages.Homepage.RelatedActivities Title="Nổi Bật Nhất" Activities="@featuredActivities" IsFeaturedActivities="true" QueryString="?hottest=true&nearest=true" />
    </div>
</section>

<VMS.Pages.Homepage.QuoteBanner />
<VMS.Pages.Homepage.LogoBaner />

@code
{
    public List<UserWithActivityViewModel> newestActivities, featuredActivities;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("vms.SetUserLocation");
    }

    protected override async Task OnInitializedAsync()
    {
        User user = IdentityService.GetCurrentUser();
        var location = await JsRuntime.InvokeAsync<CoordinateJs>("vms.GetUserLocation");
        var userLocation = location.ToCoordinate();
        newestActivities = await UserWithActService.GetRelatedActivities(user?.Id, userLocation);
        featuredActivities = await UserWithActService.GetRelatedActivities(user?.Id, userLocation, true);
    }
}