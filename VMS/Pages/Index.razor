@attribute [Route(Routes.HomePage)]

@using VMS.Domain.Models
@using VMS.Application.Interfaces
@using VMS.Application.ViewModels

@inject IJSRuntime JsRuntime
@inject IIdentityService IdentityService
@inject IUserWithActService UserWithActService

<VMS.Pages.Homepage.SloganAndVideo />
<VMS.Pages.Homepage.Filter />

<section class="my-act">
    <div class="container-lg p-0 position-relative">
        <VMS.Pages.Homepage.RelatedActivities Activities="@newestActivities" />
        <VMS.Pages.Homepage.RelatedActivities Activities="@featuredActivities" IsFeaturedActivities="true" />
    </div>
</section>

<VMS.Pages.Homepage.QuoteBanner />
<VMS.Pages.Homepage.LogoBaner />

@code
{
    public List<UserWithActivityViewModel> newestActivities, featuredActivities;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("vms.SetUserLocation");
    }

    protected override async Task OnInitializedAsync()
    {
        User user = IdentityService.GetCurrentUser();
        UserLocation location = await JsRuntime.InvokeAsync<UserLocation>("vms.GetUserLocation");

        newestActivities = await UserWithActService.GetRelatedActivities(user?.Id, location);
        featuredActivities = await UserWithActService.GetRelatedActivities(user?.Id, location, true);
    }
}