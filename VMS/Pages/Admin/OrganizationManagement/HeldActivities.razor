<div class="pop-up">
    <div class="d-flex justify-content-center align-items-center w-100 h-100">
        <div class="pop-up-container pop-up-container--large position-relative border-10 d-flex align-items-center flex-column">
            <div @onclick="CloseModal" class="close-btn position-absolute d-flex justify-content-center align-items-center">
                <span class="material-icons">
                    close
                </span>
            </div>

            <div class="pop-up__title text-center pt-4 pb-2">
                <h3 class="fw-medium mb-0">Hoạt động <span> đã tổ chức</span></h3>
            </div>

            @foreach (var item in pagedResult.Results)
            {
                <div class="pop-up__act p-2 w-75 mb-3">
                    <div class="pop-up__act__title px-1 pt-1 lm-text">@item.Title</div>
                    <div class="d-flex justify-content-between mt-1">
                        <h5 class="pop-up__act__org d-flex align-items-center mb-0">
                            <i class="material-icons me-1">public</i> @item.Name
                        </h5>
                        <h5 class="fw-normal mb-0">Ngày đăng: 13/10/2021</h5>
                    </div>
                </div>
            }
            <div class="my-pagination-container">
                <Pager CurrentPage="@pagedResult.CurrentPage"
                       PageCount="@pagedResult.PageCount"
                       OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })" 
                       IsUsedForPopup="true"/>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; }

    private async Task CloseModal()
    {
        await Modal.CloseAsync();
    }

    private List<FakeData> fakeDatas = new();

    private class FakeData
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Name { get; set; }
    }

    public abstract class PagedResultBase
    {
        public int CurrentPage { get; set; }
        public int PageCount { get; set; }
        public int PageSize { get; set; }
        public int RowCount { get; set; }
        public int FirstRowOnPage => Math.Min((CurrentPage - 1) * PageSize + 1, RowCount);
        public int LastRowOnPage => Math.Min(CurrentPage * PageSize, RowCount);
    }

    protected override async Task OnInitializedAsync()
    {
        pagedResult = GetFakeData();
    }

    private async Task HandlePageChanged()
    {
        pagedResult = GetFakeData();
        StateHasChanged();
    }

    public class PagedResult<T> : PagedResultBase where T : class
    {
        public T[] Results { get; set; }
    }
    private PagedResult<FakeData> pagedResult;
    private int page = 1;

    private PagedResult<FakeData> GetFakeData()
    {
        var result = new PagedResult<FakeData>();
        result.CurrentPage = page;
        result.RowCount = 200;
        result.PageSize = 3;
        result.PageCount = result.RowCount / result.PageSize;
        result.Results = Enumerable.Range(0, result.PageSize).Select(x => new FakeData
        {
            Title = "Tuyển tình nguyện viên tham gia công tác phòng, chống dịch bệnh Covid - 19 tại địaaa phương",
            Name = "Công nghệ thông tin kinh doanh",
        }).ToArray();

        return result;
    }
}
