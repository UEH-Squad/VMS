@using VMS.Application.ViewModels
@inject IJSRuntime JSRuntime

<div class="check-box-container mb-3">
    <div class="form-check form-check-inline d-flex align-items-center ps-0 pe-5">
        <input @bind=Filter.Virtual class="my-check-box cursor-pointer" type="checkbox" id="virtual">
        <label class="my-check-box-label cursor-pointer" for="virtual">Virtual</label>
    </div>
    <div class="form-check form-check-inline d-flex align-items-center ps-0 pe-5">
        <input @bind=Filter.Actual class="my-check-box cursor-pointer" type="checkbox" id="actual" value="actual">
        <label class="my-check-box-label cursor-pointer" for="actual">Actual</label>
    </div>
    @if (areasPinned is not null)
    {
        @foreach (var area in areasPinned)
        {
            <div class="form-check form-check-inline d-flex align-items-center p-0">
                @if (Filter.Areas.Exists(x => x.Id == area.Id))
                {
                    <input @onclick="(() => ChangeStatePinnedArea(area))" class="my-check-box cursor-pointer" type="checkbox" id="@area.Icon" checked style="--checkbox-color: @area.Color">
                }
                else
                {
                    <input @onclick="(() => ChangeStatePinnedArea(area))" class="my-check-box cursor-pointer" type="checkbox" id="@area.Icon" style="--checkbox-color: @area.Color">
                }
                <label class="my-check-box-label d-flex align-items-center cursor-pointer" style="color: @area.Color" for="@area.Icon">
                    @area.Name
                    <span class="material-icons-outlined">
                        @area.Icon
                    </span>
                </label>
            </div>
        }
    }
</div>

<div class="filter-bar-pc mb-5">
    <div class="filter-item filter-item-city position-relative">
        <input @onclick="ToggleCityDropdown" @onfocusout="CloseCityDropdown" class="popup-btn @(Filter.ProvinceId != 0 ? "bg-grey" : "")" placeholder="@cityChoosenValue" readonly />
        <div @onclick:preventDefault class="my-dropdown" style="display: @(isCityShow ? "block" : "none")">
            <ul>
                @if (provinces is not null)
                {
                    @foreach (var province in provinces)
                    {
                        <li @onmousedown="() => ChooseCityValueAsync(province)">@province.Name</li>
                    }
                }
            </ul>
        </div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="filter-item filter-item-district position-relative">
        <input @onclick="ToggleDistrictDropdown" @onfocusout="CloseDistrictDropdown" class="popup-btn @(Filter.DistrictId != 0 ? "bg-grey" : "")" placeholder="@districtChoosenValue" readonly />
        <div class="my-dropdown" style="display: @(isDistrictShow ? "block" : "none")">
            <ul>
                @if (districts is not null)
                {
                    @foreach (var district in districts)
                    {
                        <li @onmousedown="() => ChooseDistrictValueAsync(district)">@district.Name</li>
                    }
                }
            </ul>
        </div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="filter-item filter-item-ward position-relative">
        <input @onclick="ToggleWardDropdown" @onfocusout="CloseWardDropdown" class="popup-btn @(Filter.WardId != 0 ? "bg-grey" : "")" placeholder="@wardChoosenValue" readonly />
        <div class="my-dropdown" style="display: @(isWardShow ? "block" : "none")">
            <ul>
                @if (wards is not null)
                {
                    @foreach (var ward in wards)
                    {
                        <li @onmousedown="() => ChooseWardValue(ward)">@ward.Name</li>
                    }
                }
            </ul>
        </div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="filter-item filter-item-organization position-relative">
        <input @onclick="ToggleOrganizationDropdown" @onfocusout="CloseOrganizationDropdown" class="popup-btn @(!string.IsNullOrEmpty(Filter.OrgId)?"bg-grey":"")" placeholder="@organizationChoosenValue" readonly />
        <div class="my-dropdown" style="display: @(isOrganizationShow ? "block" : "none")">
            <ul>
                @if (organizers is not null)
                {
                    @foreach (var org in organizers)
                    {
                        <li @onmousedown="() => ChooseOrganizationValue(org)">@org.FullName</li>
                    }
                }
            </ul>
        </div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="filter-item position-relative">
        <div @onclick="ShowAreasPopupAsync" class="popup-btn @(Filter.Areas.Count != 0 ? "bg-grey" : "")">@(Filter.Areas.Count != 0 ? Filter.Areas.GetListNames() : "Lĩnh vực")</div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="filter-item position-relative">
        <div @onclick="ShowSkillsPopupAsync" class="popup-btn @(Filter.Skills.Count != 0? "bg-grey" : "")">@(Filter.Skills.Count != 0 ? Filter.Skills.GetListNames() : "Kỹ năng")</div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="filter-item filter-item-organization position-relative">
        <input @onclick="ToggleActTypeDropdown" @onfocusout="CloseActTypeDropdown" class="popup-btn bg-grey" placeholder="@Filter.ActType.GetName()" readonly />
        <div class="my-dropdown" style="display: @(isActTypeShow ? "block" : "none")">
            <ul>
                <li @onmousedown="() => ChooseActType(StatusAct.Happenning)">@StatusAct.Happenning.GetName()</li>
                <li @onmousedown="() => ChooseActType(StatusAct.TookPlace)">@StatusAct.TookPlace.GetName()</li>
                <li @onmousedown="() => ChooseActType(StatusAct.Closed)">@StatusAct.Closed.GetName()</li>
            </ul>
        </div>
        <span class="material-icons-outlined position-absolute filter-item__icon">
            expand_more
        </span>
    </div>

    <div class="btn-wrapper">
        <button @onclick="UpdateFilterValueAsync" class="filter-btn me-2">
            @*<span class="material-icons-outlined">
                    filter_alt
                </span>*@
            Lọc
        </button>
        <button @onclick="ClearFilterAsync" type="button" class="clear-filter-btn">Xóa lọc</button>
    </div>

</div>

<div class="filter-bar-mobile">
</div>

    <div class="arrange-bar">
        <label class="d-inline-block m-0 me-5">Sắp xếp theo</label>
        @foreach (var item in orderDatas)
        {
            <div class="d-flex align-items-center ps-0 pe-5">
                @if (OrderList[item.OrderBy])
                {
                    <input @onchange='() => ChangeOrderAsync(item.OrderBy)' class="my-radio-box cursor-pointer" type="checkbox" checked id="@item.OrderBy">
                }
                else
                {
                    <input @onchange='() => ChangeOrderAsync(item.OrderBy)' class="my-radio-box cursor-pointer" type="checkbox" id="@item.OrderBy">
                }
                <label class="my-radio-box-label cursor-pointer" for="@item.OrderBy">@item.Name</label>
            </div>
        }
    </div>


    @code {
    }
