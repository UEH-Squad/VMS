@if (PageCount > 1)
{
    int start = 2;
    int finish = PageCount - 1;
    bool shouldShowLeftDots = false;
    bool shouldShowRightDots = false;
    int half = (int)Math.Ceiling(visiblePages / 2d);

    if (PageCount > visiblePages)
    {
        start = CurrentPage - 1;
        finish = CurrentPage + 1;
        shouldShowLeftDots = true;
        shouldShowRightDots = true;

        if (CurrentPage < 1 + half)
        {
            start = 2;
            finish = start + (half - 1);
            shouldShowLeftDots = false;
        }

        if (CurrentPage > PageCount - half)
        {
            finish = PageCount - 1;
            start = finish - (half - 1);
            shouldShowRightDots = false;
        }
    }

    var hasPrevious = CurrentPage > 1 && PageCount > 1;
    var hasNext = CurrentPage < PageCount;
    <nav>
        <ul class="pagination">
            @if (hasPrevious)
            {
                <li class="btn-prev" @onclick="@(() => PagerButtonClicked(CurrentPage - 1))" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">
                    <span class="material-icons">keyboard_arrow_left</span>
                </li>
            }
            else
            {
                <li class="btn-prev" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">
                    <span class="material-icons">keyboard_arrow_left</span>
                </li>
            }
            @if (ShowPageNumbers)
            {
                <li class="numb @(CurrentPage == 1 ? "active" : "")" @onclick="@(() => PagerButtonClicked(1))" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">1</li>

                @if (shouldShowLeftDots)
                {
                    <li class="dots" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">...</li>
                }

                for (var i = start; i <= finish; i++)
                {
                    var currentIndex = i;
                    if (i == CurrentPage)
                    {
                        <li class="numb active" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">@i</li>
                    }
                    else
                    {
                        <li class="numb" @onclick="@(() => PagerButtonClicked(currentIndex))" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">@currentIndex</li>
                    }
                }

                @if (shouldShowRightDots)
                {
                    <li class="dots" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">...</li>
                }

                <li class="numb @(CurrentPage == PageCount ? "active" : "")" @onclick="@(() => PagerButtonClicked(PageCount))" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">@PageCount</li>
            }
            @if (hasNext)
            {
                <li class="btn-prev" @onclick="@(() => PagerButtonClicked(CurrentPage + 1))" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">
                    <span class="material-icons">keyboard_arrow_right</span>
                </li>
            }
            else
            {
                <li class="btn-prev" style="@(IsUsedForPopup ? "margin: 0 8px;" : "")">
                    <span class="material-icons">keyboard_arrow_right</span>
                </li>
            }
        </ul>
    </nav>
}
else
{
    <div class="pagination"></div>
}

@code {

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public Func<int, Task> OnPageChanged { get; set; } = null;

    [Parameter]
    public bool ShowPageNumbers { get; set; } = true;

    [Parameter] public bool IsUsedForPopup { get; set; }


    private int visiblePages = 5;

    private void PagerButtonClicked(int page)
    {
        OnPageChanged?.Invoke(page);
    }

}