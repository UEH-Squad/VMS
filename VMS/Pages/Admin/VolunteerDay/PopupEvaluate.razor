@using VMS.Application.ViewModels;
<div class="my-modal">
    <div class="modal__content">
        <div class="modal__edit @(isShowSuccess ? "d-none" : "d-block")">
            <div @onclick="CloseModalAsync" class="icon-close">
                <span class="material-icons">
                    close
                </span>
            </div>
            <h3 class="text-center">Đánh giá <span>ngày tình nguyện</span></h3>
            @* Form *@
            
            <div class="row align-items-center mb-3">
                <p class="form__title  form__title--area col-3">Lĩnh vực<span>(*)</span>:</p>
                <div class="col-3">
                    <div class=" position-relative" >
                        <div style="height: 39px" class=" ps-2 form-control"></div>
                        <span class="material-icons-outlined position-absolute filter-item__icon">
                            expand_more
                        </span>
                    </div>
                </div>
            </div>
            <div class="row align-items-center mb-3">
                <p class="col-3 form__title form__title--numberWork">Ngày hoạt động<span>(*)</span>:</p>
                <div class="col-3">
                    <input type="number" class="form-control" />
                </div>

                <div class="position-relative managementTool__value">
                    <input @onclick="ToggLeValueDropdown" @onfocusout="CloseValueDropdown" class="popup-btn form-control @(isValueGrey? "bg-grey" : "")" placeholder="@ValueChoosen" readonly />
                    <div @onclick:preventDefault class="my-dropdown" style="display: @(isValueShow ? "block" : "none")">
                        <ul>
                            @if (Values is not null)

                            {
                                @foreach (var value in Values)
                                {
                                    <li @onmousedown="() => ChooseValue(value)">@value.Value</li>
                                }
                            }
                        </ul>
                    </div>
                    <span class="material-icons-outlined position-absolute popup-btn-icon">
                        unfold_more
                    </span>
                </div>
            </div>
            <div class="row mb-3 ">
                <p class="col-3  form__title form__title--numberVolunteerDay">Ngày tình nguyện<span>(*)</span>:</p>
                <div class="numberVolunteerDay">
                    <input type="number" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <p class="col-3 form__title ">Mô tả<span>(*)</span>:</p>
                <div class="col-9">
                    <textarea class="form-control" rows="4"/>
                </div>
            </div>
            <div class="row ">
                <p class="col-3 form__title ">Ghi chú <span>(*)</span>:</p>
                <div class="col-9">
                    <textarea class="form-control" rows="4"/>
                </div>
            </div>

            <div class="from__btn text-center">
                <button @onclick="ShowPopupSuccess" type="submit" class="btn btn-create">Lưu</button>
            </div>
           
        </div>
        <div class="modal__success @(isShowSuccess ? "d-block" : "d-none")">
            <div @onclick="CloseModalAsync" class="icon-close">
                <span class="material-icons">
                    close
                </span>
            </div>
            <h3 class="text-center mb-0">Bạn đã <span>lưu nội dung</span></h3>
            <h3 class="text-center mb-0">thành công</h3>
        </div>
    </div>
</div>

@code {
    //[Parameter] public VolunteerDayViewModel VolunteerDay { get; set; }
    private AccountViewModel account = new();

    [CascadingParameter] public BlazoredModalInstance Modal { get; set; }

    private async Task CloseModalAsync()
    {
        await Modal.CloseAsync();
    }
    private bool isShowSuccess = false;
    private async Task ShowPopupSuccess()
    {
        isShowSuccess = true;
    }
    // Nhiều hơn, ít hơn, bằng
    private string ValueChoosen = "";
    private bool isValueShow;
    private bool isValueGrey = false;

    public class fakeValue
    {
        public string Value { get; set; }
    }
    private List<fakeValue> Values = new()
    {
        new fakeValue() { Value = "Nhiều hơn" },
        new fakeValue() { Value = "Ít hơn" },
        new fakeValue() { Value = "Bằng" },
    };
    private void ChooseValue(fakeValue value)
    {
        ValueChoosen = value.Value;
        isValueGrey = true;
    }
    private void ToggLeValueDropdown()
    {
        isValueShow = !isValueShow;
    }

    private void CloseValueDropdown()
    {
        isValueShow = false;
    }

}
