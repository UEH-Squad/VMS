@using VMS.Application.Interfaces
@using VMS.Application.ViewModels
@inject IJSRuntime JsRuntime

<section class="my-act">
	<div class="container">
		<div class="row">
			<div class="act col-8 ps-0" id="act">
				<h3>Có <span>@(activityFiltered is null ? "0" : activityFiltered.Count) hoạt động</span> đang cần tình nguyện viên ứng với kết quả tìm kiếm</h3>
				<div class="px-2">
					<div class="act__page-1">
						@if (pagedResult is not null && pagedResult.Results.Count != 0)
						{
							@foreach (var item in pagedResult.Results)
							{
								<div class="act__item row mt-5">
									<div class="col-4">
										<img class="w-100" src="img/act.png" alt="">
									</div>
									<div class="col-8 act__content">
										<a href="" class="lmtext-3">@item.Name</a>
										<h5>
											<i class="material-icons">public</i>@item.Organizer
										</h5>
										<p class="lmtext-2">@item.Description</p>
										<span>Ngày đăng: @item.PostDate.ToString("dd/MM/yyyy")</span>
										<div class="act__signUp">
											<i @onclick="@(() => HandleFavorite(item.Id))" class="material-icons">@(item.IsFav ? "favorite" : "favorite_border")</i>

											<button @onclick="ShowModal" class="btn">Đăng kí</button>
										</div>
									</div>
								</div>
							}
						}
					</div>
				</div>
				<a class="goToDivAct d-none " href="#act">go to div act</a>
			</div>
			<div class="col-3 ms-auto">
				<FeaturedAct></FeaturedAct>
			</div>
		</div>
	</div>
</section>

<Pager CurrentPage="@pagedResult.CurrentPage"
	   PageCount="@pagedResult.PageCount"
	   OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })" />

@code {
	private List<ActivityViewModel> activityViewModels;
	private List<ActivityViewModel> activityFiltered;
	private PagedResult<ActivityViewModel> pagedResult = new() { Results = new() };
	private int count = 20;
	private int page = 1;

	[Parameter]
	public FilterActivityViewModel Filter { get; set; }
	[Parameter]
	public string SearchValue { get; set; }
	[Inject]
	private IActivityService ActivityService { get; set; }
	[Inject]
	private IIdentityService IdentityService { get; set; }

	private class FakeData
	{
		public int Id { get; set; }
		public string Title { get; set; }
		public string Organizer { get; set; }
		public string ShortDescription { get; set; }
		public DateTime CreatedDate { get; set; }
		public bool IsFav { get; set; }
	}

	public abstract class PagedResultBase
	{
		public int CurrentPage { get; set; }
		public int PageCount { get; set; }
		public int PageSize { get; set; }
		public int RowCount { get; set; }
		public int FirstRowOnPage => Math.Min((CurrentPage - 1) * PageSize + 1, RowCount);
		public int LastRowOnPage => Math.Min(CurrentPage * PageSize, RowCount);
	}

	public class PagedResult<T> : PagedResultBase where T : class
	{
		public List<T> Results { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		activityViewModels = await ActivityService.GetAllActivitiesAsync();

		HandleFilterAndSearch();
	}

	private async Task HandlePageChanged()
	{
		pagedResult = GetData();
		StateHasChanged();
		await JsRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
	}

	private void HandleFavorite(int id)
	{
	    var clickedItem = pagedResult.Results.FirstOrDefault(x => x.Id == id);
	    if (clickedItem is not null)
	    {
	        clickedItem.IsFav = !clickedItem.IsFav;
			IdentityService.HandleFavoriteActivity(id);
	    }
	}

	private void HandleFilterAndSearch()
	{
		activityFiltered = activityViewModels.Where(a => a.Name.ToUpper().Trim().Contains(SearchValue.ToUpper().Trim()))
												.Where(a => a.IsVirtual == Filter.Virtual || a.IsVirtual == Filter.Actual)
												.Where(a => a.ActivityAddresses.Any(x => x.AddressPathId == Filter.AddressPathId) || Filter.AddressPathId == 0)
												.Where(a => a.Organizer.Id == Filter.OrgId || string.IsNullOrEmpty(Filter.OrgId))
												.Where(a => Filter.Areas.Any(x => x == a.AreaId) || Filter.Areas.Count == 0)
												.Where(a => Filter.Skills.All(s => a.ActivitySkills.Any(x => x.SkillId == s.Id)))
												.ToList();

		pagedResult = GetData();
	}

	private PagedResult<ActivityViewModel> GetData()
	{
		var result = new PagedResult<ActivityViewModel>();
		result.CurrentPage = page;
		result.RowCount = 100;
		result.PageSize = 20;
		result.PageCount = result.RowCount / result.PageSize;
		result.Results = activityFiltered.Skip((result.CurrentPage - 1) * result.PageSize).Take(result.PageSize).ToList();

		return result;
	}

	[CascadingParameter]
	public IModalService Modal { get; set; }

	async Task ShowModal()
	{
		var options = new ModalOptions()
		{
			HideCloseButton = true,
			DisableBackgroundCancel = true,
			UseCustomLayout = true,
		};
		Modal.Show<Signup>("", options);
	}

}