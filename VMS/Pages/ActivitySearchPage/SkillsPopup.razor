@inject IModalService Modal
<div class="modal-backdrop modal-dialog-centered justify-content-center">
    <div class="my-custom-popup position-relative">
        <span @onclick="CloseModal" class="material-icons-outlined close-btn">
            close
        </span>
        <h3 class="text-center mt-4 mb-4">Kỹ năng</h3>
        <div class="col-10 skill-modal-content">
            <div class=" skill-modal-content__container">
                    @for (int i = 0; i < 15; i++)
                    {
                        int id = i;
                        <div class="skill-item-wrapper d-flex align-items-center">
                            <p @onclick=" () => ChangeStateAndCheckSubPopup(id)" class="m-0 @(ChoosenSkillsList[id,0] ? "colored-green position-relative" : "") ">Kỹ năng mềm @(i+1)
                            
                                @if (id == 0)
                                {
                                    <div @onclick:stopPropagation class="my-custom-sub-popup position-absolute @(IsShowSubSkills ? "d-block" : "")">
                                        @for (int j = 1; j <= 10; j++)
                                        {
                                            int subID = j;
                                            <p @onclick="() => CheckChoosenSubSkills(subID)" class="sub-popup-item mb-3 @(ChoosenSkillsList[0, subID] ? "underlined" : "")">Làm việc nhóm @(subID)</p>
                                        }
                                    </div>
                                }
                                @if (id == 1)
                                {
                                    <div @onclick:stopPropagation class="my-custom-sub-popup position-absolute @(IsShowExpertise ? "d-block" : "")">
                                        @for (int j = 1; j <= 8; j++)
                                        {
                                            int subID = j;
                                            <p @onclick="() => CheckChoosenExpertise(subID)" class="sub-popup-item mb-3 @(ChoosenSkillsList[1, subID] ? "underlined" : "")">Kế toán/ Kiểm toán @(subID)</p>
                                        }
                                    </div>
                                }
                            </p>
                        </div>
                    }
        </div>
        <div @onclick="SaveModal" class="save-btn d-flex justify-content-center align-items-center">Lưu</div>
    </div>
    </div>
</div>
@code {
    [Parameter]
    public bool[,] ChoosenSkillsList { get; set; }
    bool IsShowExpertise = false;
    bool IsShowSubSkills = false;
    bool IsThereSelectedItem = false;
    int numberOfSkills = 15;
    int numberOfSubSkills = 10;

    bool[,] BoolArraySkills = new bool[15,11];
    protected override async Task OnInitializedAsync()
    {
        //create a curent list when modal open incase user click close button but don't save
        for (int SkillIndex = 0; SkillIndex < numberOfSkills; SkillIndex++)
        {
            for (int SubIndex = 0; SubIndex <= numberOfSubSkills; SubIndex++)
            {
                BoolArraySkills[SkillIndex, SubIndex] = ChoosenSkillsList[SkillIndex, SubIndex];
            }
        }

        //Check Is any Sub items selected
        ChoosenSkillsList[0, 0] = ChoosenSkillsList[1, 0] = false;
        for (int SubIndex = 1; SubIndex <= numberOfSubSkills; SubIndex++)
        {
            if (ChoosenSkillsList[0, SubIndex])
            {
                ChoosenSkillsList[0, 0] = true;
            }

            if (ChoosenSkillsList[1, SubIndex])
            {
                ChoosenSkillsList[1, 0] = true;
            }
        }
    }

    //handle change color when click items
    void ChangeStateAndCheckSubPopup(int id)
    {
        ChoosenSkillsList[id,0] = !ChoosenSkillsList[id,0];
        IsThereSelectedItem = false;
        for (int j = 0; j < numberOfSkills; j++)
        {
            if (ChoosenSkillsList[j,0])
            {
                IsThereSelectedItem = true;
            }
        }

        if (id == 0)
        {
            ShowSubSkills();
            ChoosenSkillsList[id,0] = true;
            if (IsThereSelectedSubItem || IsShowSubSkills)
            {
                IsThereSelectedItem = true;
            }
            else
            {
                ChoosenSkillsList[id, 0] = BoolArraySkills[id, 0] = false;
            }
        }
        if (id == 1)
        {
            ShowExpertise();
            ChoosenSkillsList[id,0] = true;
            if (IsThereSelectedSubItem || IsShowExpertise)
            {
                IsThereSelectedItem = true;
            }
            else
            {
                ChoosenSkillsList[id, 0] = BoolArraySkills[id, 0] = false;
            }
        }
    }

    //handle underline sub skill popup items
    bool IsThereSelectedSubItem = false;
    void CheckChoosenSubSkills(int id)
    {
        ChoosenSkillsList[0, id] = !ChoosenSkillsList[0, id];
        IsThereSelectedSubItem = false;
        for (int j = 1; j <= numberOfSubSkills; j++)
        {
            if (ChoosenSkillsList[0, j])
            {
                ChoosenSkillsList[0, 0] = BoolArraySkills[0, 0] = true;
                IsThereSelectedSubItem = true;
            }
        }
    }

    //handle underline expertise popup items
    void CheckChoosenExpertise(int id)
    {
        ChoosenSkillsList[1, id] = !ChoosenSkillsList[1, id];

        IsThereSelectedSubItem = false;
        for (int j = 1; j <= 9; j++)
        {
            if (ChoosenSkillsList[1, j])
            {
                ChoosenSkillsList[1, 0] = BoolArraySkills[1, 0] = true;
                IsThereSelectedSubItem = true;
            }
        }
    }

    //Show sub popup

    void ShowSubSkills()
    {
        IsShowSubSkills = !IsShowSubSkills;
    }

    void ShowExpertise()
    {
        IsShowExpertise = !IsShowExpertise;
    }




    //Close and save button
    [CascadingParameter]
    private BlazoredModalInstance SkillsModal { get; set; }
    void CloseModal()
    {
        for (int SkillIndex = 0; SkillIndex < numberOfSkills; SkillIndex++)
        {
            for (int SubIndex = 0; SubIndex <= numberOfSubSkills; SubIndex++)
            {
                if (ChoosenSkillsList[SkillIndex, SubIndex] && BoolArraySkills[SkillIndex, SubIndex] == false)
                {
                    ChoosenSkillsList[SkillIndex, SubIndex] = false;
                }

                if (ChoosenSkillsList[SkillIndex, SubIndex] == false && BoolArraySkills[SkillIndex, SubIndex])
                {
                    ChoosenSkillsList[SkillIndex, SubIndex] = true;
                }
            }
        }
        SkillsModal.CloseAsync(ModalResult.Ok(""));
    }

    void SaveModal()
    {
        ChoosenSkillsList = BoolArraySkills;
        if (IsThereSelectedItem)
        {
            SkillsModal.CloseAsync(ModalResult.Ok("bg-grey"));
        }
        else
        {
            SkillsModal.CloseAsync(ModalResult.Ok(""));
        }
    }

}
