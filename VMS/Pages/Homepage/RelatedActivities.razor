@using Microsoft.AspNetCore.Identity
@using VMS.Domain.Models
@using VMS.Application.Interfaces
@using VMS.Application.ViewModels

@inject IIdentityService IdentityService 
@inject IJSRuntime JsRuntime
@inject IUserWithActService UserWithActService

<div class="container-lg p-0 position-relative">
    <div class="act-container position-relative">
        <div class="act-section margin-10">
            <a href="@Routes.Activities" class="act-header">
                <span class="act-header__green">Hoạt động</span>
                <span class="act-header__blue">mới nhất</span>
                <span class="act-header__green">gần bạn</span>
            </a>
            <div class="my-row">
                @if (newestActivities != null)
                {
                    foreach (var activity in newestActivities)
                    {
                        <div class="col-lg-3 col-4 padding-10 item-wrapper">
                            <a href="@Routes.Activities" class="act-item">
                                <img src="./img/RelatedActivities/1st-activity.png" alt="Hoạt động tình nguyện" class="act-item--img">
                                <div class="act-item--title fw-bold">
                                    <p class="m-0">@activity.ActivityName</p>
                                </div>
                                <span class="act-unchecked material-icons-outlined">
                                    check_circle_outline
                                </span>
                            </a>
                        </div>
                    }
                <a href="@Routes.Activities" class="act-more">Nhiều hơn >></a>
                }
                else
                {
                    <p>Không có hoạt động</p>
                }
            </div>
        </div>
    </div>
    <div class="act-container position-relative margin-bt">
        <div class="act-section margin-10">
            <a href="@Routes.Activities" class="act-header">
                <span class="act-header__green">Hoạt động</span>
                <span class="act-header__blue">nổi bật</span>
                <span class="act-header__green">gần bạn</span>
            </a>
            <div class="my-row">
                @if (featuredActivities != null)
                {
                    foreach (var activity in featuredActivities)
                    {
                        <div class="col-lg-3 col-4 padding-10 item-wrapper">
                            <a href="@Routes.Activities" class="act-item">
                                <img src="./img/RelatedActivities/1st-activity.png" alt="Hoạt động tình nguyện" class="act-item--img">
                                <div class="act-item--title fw-bold">
                                    <p class="m-0">@activity.ActivityName</p>
                                </div>
                                <span class="act-unchecked material-icons-outlined">
                                    check_circle_outline
                                </span>
                            </a>
                        </div>
                    }
                <a href="@Routes.Activities" class="act-more">Nhiều hơn >></a>
                }
                else
                {
                    <p>Không có hoạt động</p>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private User user;
    private UserLocation location;
    private List<UserWithActivityViewModel> newestActivities, featuredActivities;


    class UserLocation
    {
        public double Lat { get; set; }
        public double Long { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("vms.SetUserLocation");
    }

    protected override async Task OnInitializedAsync()
    {
        user = IdentityService.GetCurrentUser();
        location = await JsRuntime.InvokeAsync<UserLocation>("vms.GetUserLocation");
        if(location != null)
        {
            newestActivities = await UserWithActService.GetNewestActivitiesWithUserLocAsync(location.Lat, location.Long);
            featuredActivities = await UserWithActService.GetFeaturedActivitiesWithUserLocAsync(location.Lat, location.Long);
        }
        else if(user == null)
        {
            newestActivities = await UserWithActService.GetNewestActivitiesWithoutUserLocAsync();
            featuredActivities = await UserWithActService.GetFeaturedActivitiesWithoutUserLocAsync();
        }
        else
        {
            newestActivities = await UserWithActService.GetNewestActivitiesWithDistristAsync();
            featuredActivities = await UserWithActService.GetfeaturedActivitiesWithDistristAsync();
        }
    }
}
