@inject IJSRuntime JsRuntime

<div class="row">
    <div class="text-result mb-5">Có <span>@SumResult</span> hoạt động tương ứng với kết quả tìm kiếm của bạn.</div>
</div>
@if (pagedResult != null && pagedResult.Results.Length != 0)
{
    @foreach (var item in pagedResult.Results)
    {
<div class="org-card" style="z-index:@(item.PopupZIndex? "2" : "1"); display:@(item.IsDelete? "none" : "flex"); opacity: @(item.IsClose==false || item.PopupClose || item.PopupDel || item.DelConfirm || item.CloseConfirm? 1:0.75)">
    <div class="org-card__btn-edit btn" >
        <span class="material-icons-outlined" @onclick="@(() => DropDownClick(item.Id,"edit"))">
            more_horiz
        </span>
        <ul class="org-card__btn-edit__list card-list" style="display:@(item.EditDropDown ? "inline-block" : "none");">
            <li class="item-1">Chỉnh sửa</li>
            <li class="item-2" @onclick="@(() => { DropDownClick(item.Id, "edit"); DelConfirm(item.Id);})">Xóa</li>
            <li class="item-3" @onclick="@(() => { DropDownClick(item.Id, "edit"); CloseConfirm(item.Id);})">Đóng hoạt động</li>
        </ul>
    </div>
    <div class="org-card__img">
        <img src="@item.ImgSrc" alt="photo">
    </div>
    <div class="org-card__info">
        <div class="org-card__info__title">
            @item.Title
        </div>
        <div class="org-card__info__rate">
            <span class="material-icons-outlined" style="color:@(item.Rate >= 1 ? "#EDF131" : "#B4B4B4")">
                star@(HaftStar(item.Rate,1)?"_half":"")
            </span>
            <span class="material-icons-outlined" style="color:@(item.Rate >= 2 ? "#EDF131" : "#B4B4B4")">
                star@(HaftStar(item.Rate,2)?"_half":"")
            </span>
            <span class="material-icons-outlined" style="color:@(item.Rate >= 3 ? "#EDF131" : "#B4B4B4")">
                star@(HaftStar(item.Rate,3)?"_half":"")
            </span>
            <span class="material-icons-outlined" style="color:@(item.Rate >= 4 ? "#EDF131" : "#B4B4B4")">
                star@(HaftStar(item.Rate,4)?"_half":"")
            </span>
            <span class="material-icons-outlined" style="color:@(item.Rate >= 5 ? "#EDF131" : "#B4B4B4")">
                star@(HaftStar(item.Rate,5)?"_half":"")
            </span>
        </div>
        <div class="org-card__info__desc">
            @item.ShortDescription
        </div>
        <div class="org-card__info__date">
            Ngày đăng: <span>20/07/2021</span>
        </div>
        <div class="org-card__info__joiner">
            <div class="org-card__info__joiner__icon">
                <span class="material-icons">
                    person
                </span>
            </div>
            <div class="org-card__info__joiner__sum">
                @item.Joiner
            </div>
        </div>
    </div>
    <div class="org-card__btn-list card-btn">
        Xem danh sách
    </div>
    <div class="org-card__cbb-rate card-btn">
        <div href="#" class="org-card__cbb-rate__title" @onclick="@(() => DropDownClick(item.Id,"rate"))">Đánh giá</div>
        <span class="material-icons-outlined expand-icon" @onclick="@(() => DropDownClick(item.Id,"rate"))">
            expand_more
        </span>
        <ul class="org-card__cbb-rate__list card-list" style="display:@(item.RateMethodDropDown ? "inline-block" : "none");">
            <li>Tình nguyện viên</li>
            <li>Đánh giá hoạt động</li>
        </ul>
    </div>
    @*--------------------Confirm------------------- *@
    <div class="popup-container" style="display:@(item.DelConfirm?"initial":"none")">
        <div class="org-card__del-confirm confirm">
            <div class="close-icon" @onclick="@(() => DelConfirm(item.Id))">
                <span class="material-icons-outlined">
                    close
                </span>
            </div>
            <div class="content --del">
                Bạn có chắc chắn muốn<br />
                <span>xóa hoạt động</span> này không?
            </div>
            <div class="btn-yes card-btn" @onclick="@(() => DelItem(item.Id))">
                Xác nhận
            </div>
            <div class="btn-cancel card-btn" @onclick="@(() => DelConfirm(item.Id))">
                Hủy
            </div>
        </div>
    </div>
    <div class="popup-container" style="display:@(item.CloseConfirm?"initial":"none")">
        <div class="org-card__close-confirm confirm">
            <div class="close-icon" @onclick="@(() => CloseConfirm(item.Id))">
                <span class="material-icons-outlined">
                    close
                </span>
            </div>
            <div class="content --close">
                Bạn có chắc chắn muốn<br />
                <span>đóng hoạt động</span> này không?
            </div>
            <div class="btn-yes card-btn" @onclick="@(() => CloseItem(item.Id))">
                Xác nhận
            </div>
            <div class="btn-cancel card-btn" @onclick="@(() => CloseConfirm(item.Id))">
                Hủy
            </div>
        </div>
    </div>
    @*-----------------Popup--------------*@
    <div class="popup-container" style="display:@(item.PopupClose?"initial":"none")">
        <div class="org-card__close-succ notify --close">
            <div class="close-icon">
                <span class="material-icons-outlined" @onclick="@(()=> CloseItem(item.Id))">
                    close
                </span>
            </div>
            <div class="content">Đóng hoạt động thành công!</div>
        </div>
    </div>
    <div class="popup-container" style="display:@(item.PopupDel?"initial":"none")">
        <div class="org-card__del-succ notify --del">
            <div class="close-icon" @onclick="@(()=> DelItem(item.Id))">
                <span class="material-icons-outlined">
                    close
                </span>
            </div>
            <div class="content">Xóa hoạt động thành công!</div>
        </div>
    </div>
</div>
    }
}

<div class="pagination-org">
    <Pager CurrentPage="@pagedResult.CurrentPage"
           PageCount="@pagedResult.PageCount"
           OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })" />
</div>

@code {
    private int PrevItem = -1;
    private int SumResult = 100;

    private class FakeData
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string ImgSrc { get; set; }
        public int Joiner { get; set; }
        public string ShortDescription { get; set; }
        public DateTime CreatedDate { get; set; }
        public bool EditDropDown { get; set; }
        public bool RateMethodDropDown { get; set; }
        public bool DelConfirm { get; set; }
        public bool CloseConfirm { get; set; }
        public double Rate { get; set; }
        public bool IsDelete{ get; set; }
        public bool PopupDel { get; set; }
        public bool IsClose { get; set; }
        public bool PopupClose { get; set; }
        public bool PopupZIndex { get; set; }
    }

    public abstract class PagedResultBase
    {
        public int CurrentPage { get; set; }
        public int PageCount { get; set; }
        public int PageSize { get; set; }
        public int RowCount { get; set; }
        public int FirstRowOnPage => Math.Min((CurrentPage - 1) * PageSize + 1, RowCount);
        public int LastRowOnPage => Math.Min(CurrentPage * PageSize, RowCount);
    }

    public class PagedResult<T> : PagedResultBase where T : class
    {
        public T[] Results { get; set; }
    }

    private PagedResult<FakeData> pagedResult;
    private int count = 20;
    private int page = 1;

    protected override async Task OnInitializedAsync()
    {
        pagedResult = GetFakeData();
    }

    private async Task HandlePageChanged()
    {
        pagedResult = GetFakeData();
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private PagedResult<FakeData> GetFakeData()
    {
        var result = new PagedResult<FakeData>();
        result.CurrentPage = page;
        result.RowCount = 100;
        result.PageSize = 10;
        result.PageCount = result.RowCount / result.PageSize;
        result.Results = Enumerable.Range(0, result.PageSize).Select(x => new FakeData
        {
            Id = x + 1,
            Title = "Tuyển tình nguyện viên tham gia công tác phòng, chống dịch bệnh Covid-19 tại địa phương",
            ImgSrc = "img/act.png",
            Joiner = 250,
            ShortDescription = "Phường Phú Hữu thành phố Thủ Đức trân trọng kính mời y bác sĩ, cán bộ y tế nghỉ hưu có sức khoẻ, tinh thần hăng hái.",
            CreatedDate = DateTime.Now,
            EditDropDown = false,
            RateMethodDropDown = false,
            Rate = 3.5,
            DelConfirm = false,
            CloseConfirm = false,
            IsDelete = false,
            PopupDel = false,
            IsClose = false,
            PopupClose = false,
            PopupZIndex = false
        }).ToArray();

        return result;
    }

    private async Task DropDownClick(int id, string type)
    {
        if (PrevItem != -1 && PrevItem !=id) DropDownClick(PrevItem, "clear-all");
        PrevItem = id;
        var clickedItem = pagedResult.Results.FirstOrDefault(x => x.Id == id);
        if (clickedItem is not null)
        {
            switch(type)
            {
                case "edit":
                    {
                        clickedItem.EditDropDown = !clickedItem.EditDropDown;
                        clickedItem.RateMethodDropDown = false;
                        clickedItem.PopupZIndex = false;
                        break;
                    }
                case "rate":
                    {
                        clickedItem.RateMethodDropDown = !clickedItem.RateMethodDropDown;
                        clickedItem.EditDropDown = false;
                        clickedItem.PopupZIndex = !clickedItem.PopupZIndex;
                        break;

                    }
                case "clear-all":
                    {
                        clickedItem.RateMethodDropDown = false;
                        clickedItem.EditDropDown = false;
                        clickedItem.PopupZIndex = false;
                        break;
                    }
            }
        }
    }
    private bool HaftStar(double rate, int star)
    {
        if (rate - star >= 0.5 && rate - star < 1)
        {
            return true;
        }
        return false;
    }

    //----------Popup and Confirm------------//
    private async Task DelConfirm(int id)
    {
        var Item = pagedResult.Results.FirstOrDefault(x => x.Id == id);
        Item.DelConfirm = !Item.DelConfirm;
        Item.PopupZIndex = !Item.PopupZIndex;
    }

    private async Task DelItem(int id)
    {
        var Item = pagedResult.Results.FirstOrDefault(x => x.Id == id);
        if (Item.PopupDel == true)
        {
            Item.IsDelete = true;
            Item.PopupZIndex = !Item.PopupZIndex;
        }
        else Item.DelConfirm = !Item.DelConfirm;
        Item.PopupDel = !Item.PopupDel;

    }
    private async Task CloseConfirm(int id)
    {
        var Item = pagedResult.Results.FirstOrDefault(x => x.Id == id);
        Item.CloseConfirm = !Item.CloseConfirm;
        Item.PopupZIndex = !Item.PopupZIndex;
    }
    private async Task CloseItem(int id)
    {
        var Item = pagedResult.Results.FirstOrDefault(x => x.Id == id);
        if (Item.PopupClose == true)
        {
            Item.IsClose = true;
            Item.PopupZIndex = !Item.PopupZIndex;
        }
        else Item.CloseConfirm = !Item.CloseConfirm;
        Item.PopupClose = !Item.PopupClose;
    }
}
