@page "/reset-password"
@model ResetPasswordModel
@{
    ViewData["Title"] = "Reset password";
}
<div class="col-12">
    <div class="reset-heading text-center">
        <h3 class="colored-blue d-inline-block">Chọn</h3>
        <h3 class="colored-green d-inline-block">mật khẩu mới</h3>
    </div>
    <p>Tạo mật khẩu mới có tối thiểu 8 ký tự. Mật khẩu mạnh là mật khẩu được kết hợp từ các ký tự, số, và dấu câu.</p>
    <form method="post" class="my-form">
        <input class="form-control" asp-for="Input.Code" type="hidden" />
        <input class="form-control" asp-for="Input.Email" type="hidden"/>
        <div class="form-group">
            <div class="position-relative">
                <input asp-for="Input.Password" type="password" class="my-input" placeholder="Mật khẩu mới" />
                <span class="material-icons show-password-icon">
                    visibility_off
                </span>
                <span class="material-icons error-icon">
                    error
                </span>
            </div>
            <span asp-validation-for="Input.Password" class="text-danger d-block mt-2"></span>
        </div>
        <div class="form-group mt-4">
            <div class="position-relative">
                <input asp-for="Input.ConfirmPassword" type="password" class="my-input" placeholder="Xác nhận mật khẩu mới" />
                <span class="material-icons show-password-icon">
                    visibility_off
                </span>
                <span class="material-icons error-icon">
                    error
                </span>
            </div>
            <span asp-validation-for="Input.ConfirmPassword" class="text-danger d-block mt-2"></span>
        </div>
        <div class="float-end my-btn-group">
            <button type="submit" class="btn next-btn">Tiếp theo</button>
        </div>
    </form>
</div>

<div class="overlay">
    <div class="success-popup text-center d-flex align-items-center justify-content-center">
        <div>
            <h3 class="colored-green m-0">Mật khẩu của bạn</h3>
            <h3 class="colored-blue mb-4">đã được đổi thành công!</h3>
            <a href="/dang-nhap" class="btn finish-btn">Xong</a>
        </div>
    </div>
</div>
@section Styles {
    <link href="@Url.Content("~/css/IdentityCss/ResetPassword.css")" rel="stylesheet" type="text/css" />
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const visibilityIcons = document.querySelectorAll(".show-password-icon");
        const passwords = document.querySelectorAll("input[type='password']");
        const errorIcons = document.querySelectorAll(".error-icon");
        var marker;

        passwords.forEach((password, index) =>
        {
            password.addEventListener('input', () =>
            {
                if (password.value) {
                    visibilityIcons[index].style.display = 'block';
                }
                else {
                    visibilityIcons[index].style.display = 'none';
                }
                if ((index === 1) && marker === 1) {
                    visibilityIcons[1].style.display = 'none';
                }

                if ((index === 1) && passwords[1].value === passwords[0].value) {
                    visibilityIcons[1].style.display = 'block';
                }
            })
        })
        passwords.forEach((password, index) => {
            passwords[index].addEventListener('focusout', () =>
            {
                if ((passwords[0].value) && passwords[0].value === passwords[1].value) {
                    visibilityIcons[0].style.display = 'block';
                    visibilityIcons[1].style.display = 'block';
                }
                if (passwords[1].value != passwords[0].value)
                {
                    visibilityIcons[1].style.display = 'none';
                }

                if (index === 1) {
                    marker = 1;
                }
            })
        })

        const nextButton = document.querySelector('.next-btn');
        nextButton.addEventListener('click', () => {
            if (passwords[0].value == "" && passwords[1].value == "") {
                marker = 1;
            }
        })

        visibilityIcons.forEach((visibilityIcon, index) => {
            visibilityIcon.addEventListener('click', () => {
                if (passwords[index].getAttribute('type') === 'password') {
                    passwords[index].setAttribute('type', 'text');
                    visibilityIcon.innerHTML = 'visibility';
                }
                else {
                    passwords[index].setAttribute('type', 'password');
                    visibilityIcon.innerHTML = 'visibility_off';
                }
            })
        })

        const form = document.querySelector('.my-form');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if ((passwords[0].value) && passwords[0].value === passwords[1].value) {
                const overlay = document.querySelector('.overlay');
                overlay.style.display = "block";
            }
        })

        const finish = document.querySelector('.finish-btn');
        finish.addEventListener('click', () => {
            form.submit();
        })

    </script>
}
