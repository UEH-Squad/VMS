@using VMS.Application.ViewModels;

<div class="my-modal">
    <div class="modal__content">
        <div class="modal__addArea @(isAddSuccess? " d-none" : "d-block" )">
            <div @onclick="CloseModalAsync" class="icon-close">
                <span class="material-icons">
                    close
                </span>
            </div>
            <h3 class="text-center">@(isAdd ? "Thêm" :"Sửa") <span>kỹ năng</span></h3>
            <EditForm Model="skill">
                <DataAnnotationsValidator />
                <div class="d-flex align-items-center mb-20">
                    <p class="form__title form__title--name">Tên kỹ năng <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@skill.Name" class="form-control" />
                    </div>
                </div>
                <div class="d-flex align-items-center mb-20">
                    <input @bind="IsCheck" class="radio-skill" type="radio" name="radioskill" >
                    <p class="form__title form__title--icon">Chọn nhóm kỹ năng:</p>
                    <div class="filter-item position-relative" id="filter-item-notpl">
                        <input @onclick="ToggleSkillDropdown" @onfocusout="CloseSkillDropdown" class="filter-item__btn filter-item__btn--lmtext-1 form-control" placeholder="@skillChoosenValue" readonly />
                        <div @onclick:preventDefault class="filter-item__dropdown filter-item__dropdown--fit-content" style="display: @(isSkillShow ? "block" : "none")">
                            <ul>
                                @if (skills is not null)
                                {
                                    @foreach (var level in skills)
                                    {
                                        <li @onmousedown="() => ChooseSkillValue(level)">@level.Name</li>
                                    }
                                }
                            </ul>
                        </div>
                        <span class="material-icons-outlined position-absolute pe-none">
                            expand_more
                        </span>
                    </div>
                </div>
                <div class="d-flex align-items-center form__prioritize mb-30 me-3">
                    <input @bind="IsCheck" class="radio-skill" type="radio" name="radioskill" >
                    <label for="all">Tạo nhóm kỹ năng mới</label>
                </div>
                <div class="d-flex align-items-center mb-30 @(IsCheck ? "d-block" :"d-none")">
                    <p class="form__title form__title--icon">Tên nhóm kỹ năng <span>(*)</span>:</p>
                    <div class="position-relative">
                        <InputText @bind-Value="@skill.Name" class="form-control" />
                    </div>
                </div>
                <div class="from__btn text-center">
                    <button @onclick="ShowAddSuccess" type="submit" class="btn btn-add">@(isAdd ? "Thêm" :"Sửa") kỹ năng</button>
                </div>

            </EditForm>

        </div>

        <div class="modal__success @(isAddSuccess ? " d-block" : "d-none" )">
            <div @onclick="CloseModalAsync" class="icon-close">
                <span class="material-icons">
                    close
                </span>
            </div>
            <div>
                <h3 class="text-center mb-0">Bạn đã <span>@(isAdd ? "thêm" :"sửa") kỹ năng</span> thành công </h3>
            </div>
        </div>

    </div>
</div>

@code {
    private bool isAddSuccess;

    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; }
    [Parameter] public bool isAdd { get; set; }

    private SkillViewModel skill = new();

    private async Task CloseModalAsync()
    {
        await Modal.CloseAsync();
    }
    private async Task ShowAddSuccess()
    {
        isAddSuccess = true;
    }

    //Nhóm kỹ năng: XỬ LÝ CÁI RADIO DÙM NHÉ !
    bool IsCheck= true;

    private class FakeData
    {
        public string Name { get; set; }
    }

    private bool isFilterSkill;
    private bool isSkillShow;
    private string skillChoosenValue = "Kỹ năng";
    private List<FakeData> skills = new()
    {
        new FakeData() { Name = "Kỹ năng mềm" },
        new FakeData() { Name = "Quảng lý thời gian" },
        new FakeData() { Name = "Thể lực tốt" },
        new FakeData() { Name = "Lập trình" },
        new FakeData() { Name = "Lái xe" },
    };
    private void ChooseSkillValue(FakeData level)
    {
        skillChoosenValue = level.Name;
        isFilterSkill = true;
    }
    private void ToggleSkillDropdown()
    {
        isSkillShow = !isSkillShow;
    }
    private void CloseSkillDropdown()
    {
        isSkillShow = false;
    }
}

