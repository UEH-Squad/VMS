@inject IJSRuntime JS;
@using VMS.GenericRepository;
@using Blazored.Modal;

<section class="my-act row justify-content-center">
    <div class="act col-10 px-0" id="act">
        <h3>Có <span>@pagedResult.Items.Count hoạt động</span> ứng với kết quả tìm kiếm</h3>
        <div class="px-2">
            @if (pagedResult is not null && pagedResult.Items.Count != 0)
            {
                <div class="act__page-1">
                    @foreach (var item in pagedResult.Items)
                    {
                        <div class="act__item row">
                            <div class="col-4 h-100 d-flex align-items-center pe-0 ps-3 py-2">
                                <img class="w-100" src="./img/activities/132780410759551427_71b3c892-eaa9-4471-b865-e809f12932b7.jpg" alt="">
                            </div>
                            <div class="col-8 act__content d-flex flex-column justify-content-between px-3">
                                <ul class="position-absolute act-menu p-2 @(item.IsMenu ? "d-block" : "d-none")">
                                    @if (item.EndDate < DateTime.Now)
                                    {
                                        <li @onclick="() => ShowDeleteModal(item.Id)" class="delete pb-2">Xóa</li>
                                    }
                                    else
                                    {
                                        <li @onclick="() => ShowActPrivorModal(item.Id)" class="pb-2">@(item.IsPrivor ? "Gỡ ưu" : "Ưu") tiên hoạt động</li>
                                        <a href="@Routes.EditActivity" class="pb-2 text-decoration-none">Chỉnh sửa hoạt động</a>
                                        <li @onclick="() => ShowEditModal(item.Id)" class="pb-2">Yêu cầu chỉnh sửa</li>
                                        <li @onclick="() => ShowDeleteModal(item.Id)" class="delete pb-2">Xóa</li>
                                    }
                                </ul>
                                <i @onclick="() => ShowMenu(item.Id)" class="material-icons position-absolute act__content__icon">
                                    more_horiz
                                </i>
                                <div class="pe-4">
                                    <a href="@Routes.AdminActivityInfo" class="lmtext-2 text-decoration-none">@item.Title</a>
                                    <div class="star">
                                        <span class="material-icons">
                                            star_rate
                                        </span>
                                        <span class="material-icons">
                                            star_rate
                                        </span>
                                        <span class="material-icons">
                                            star_rate
                                        </span>
                                        <span class="material-icons">
                                            star_rate
                                        </span>
                                        <span class="material-icons">
                                            star_rate
                                        </span>
                                    </div>
                                    <h5 class="org-name d-flex align-items-center mb-0">
                                        <i class="material-icons">public</i> @item.Name
                                    </h5>
                                    <p class="lmtext-2 act__content-description mb-0">@item.Content</p>
                                    <div class="act__content-date d-flex flex-column mb-1">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex mb-1 align-items-center">
                                                <span class="material-icons-outlined me-2 my-icon">
                                                    assignment
                                                </span>
                                                <span class="icon-tooltip">Thời hạn đăng ký</span>
                                                <span>@item.CloseDate.ToString("dd/MM/yyyy")</span>
                                            </div>
                                            <div class=" col-6 d-flex mb-1 align-items-center div-checkbox">
                                                <input id="NubOfVolunteer" class="check-box" type="checkbox">
                                                <label for="NubOfVolunteer" class="ms-2">Số ngày tình nguyện</label>
                                            </div>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <span class="material-icons-outlined me-2 my-icon">
                                                    today
                                                </span>
                                                <span class="icon-tooltip">Ngày diễn ra</span>
                                                <span>@item.StartDate.ToString("dd/MM/yyyy") - @item.EndDate.ToString("dd/MM/yyyy")</span>
                                            </div>
                                            <div class=" col-6 d-flex mb-1 align-items-center div-checkbox">
                                                <input id="pointTraining" class="check-box" type="checkbox">
                                                <label for="pointTraining" class="ms-2">Điểm rèn luyện</label>
                                            </div>
                                        </div>
                                        
                                    </div>
                                </div>
                                <div>
                                    <h5 class="fw-normal d-flex align-items-center position-absolute act__content-participant">
                                        <i class="material-icons">
                                            person
                                        </i> 250
                                    </h5>
                                    <div class="d-flex position-absolute act-footer">
                                        @if (item.EndDate >= DateTime.Now)
                                        {
                                            if (item.IsClosed || item.StartDate < DateTime.Now)
                                            {
                                                <h5 class="act-footer__warn d-flex align-items-center fw-normal fst-italic">
                                                    <i class="material-icons-outlined fst-normal">
                                                        error
                                                    </i> Đã đóng đăng ký
                                                </h5>
                                            }
                                            else if (item.StartDate >= DateTime.Now)
                                            {
                                                @*<div class="act-footer__btn d-flex align-items-center">
                                                    <button @onclick="() => ShowApproveModal(item.Id)" class="btn act-footer__btn--approval">Duyệt hoạt động</button>
                                                </div>*@
                                            }
                                        <div class="act-footer__btn d-flex align-items-center">
                                            <button @onclick="() => ShowDenyModal(item.Id)" class="btn btn-deny">Từ chối</button>
                                        </div>
                                            <div class="act-footer__btn d-flex align-items-center">
                                                <button @onclick="() => ShowApproveModal(item.Id)" class="btn act-footer__btn--blue">Duyệt</button>
                                            </div>
                                        }

                                        @if (item.EndDate < DateTime.Now)
                                        {
                                            <div class="act-footer__btn d-flex align-items-center">
                                                <a href="@Routes.AdminWatchlistVolunteer" class="btn text-decoration-none act-footer__btn--green">Xem danh sách</a>
                                            </div>
                                            <div class="act-footer__btn d-flex align-items-center">
                                                <a href="@Routes.AdminWatchRating" class="btn text-decoration-none act-footer__btn--blue">Xem đánh giá</a>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="d-flex justify-content-center">
            <Pager CurrentPage="@pagedResult.PageIndex"
                   PageCount="@pagedResult.TotalPages"
                   OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })"
                   ShowPageNumbers="true" />
        </div>
    </div>
</section>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private PaginatedList<FakeData> pagedResult;
    private int page = 1;

    protected override void OnInitialized()
    {
        pagedResult = GetFakeData();
    }

    private async Task HandlePageChanged()
    {
        pagedResult = GetFakeData();
        StateHasChanged();
        await JS.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    private PaginatedList<FakeData> GetFakeData()
    {
        int i = 0;
        var data = Enumerable.Range(0, 20).Select(x => new FakeData
        {
            Title = "Tuyển tình nguyện viên tham gia công tác phòng, chống dịch bệnh Covid - 19 tại địaaa phương",
            Name = "Công nghệ thông tin kinh doanh",
            Content = "Phường Phú Hữu thành phố Thủ Đức trân trọng kính mời y bác sĩ, cán bộ y tế nghỉ hưu có sức khoẻ, tinh thần hăng hái.",
            Person = 250,
            CloseDate = DateTime.Parse("2021/11/21"),
            OpenDate = DateTime.Parse("2021/10/20"),
            Id = ++i,
            EndDate = DateTime.Parse("2022/10/21"),
            StartDate = DateTime.Parse("2021/11/20")
        }).ToList();

        var result = new PaginatedList<FakeData>(data, 100, page, 20);
        return result;
    }

    private class FakeData
    {
        public string Title { get; set; }
        public string Name { get; set; }
        public bool IsClosed { get; set; }
        public bool IsPrivor { get; set; } = true;
        public string Content { get; set; }
        public int Person { get; set; }
        public int Id { get; set; }
        public bool IsMenu { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime OpenDate { get; set; }
        public DateTime CloseDate { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("vms.AddOutsideClickMenuHandler", DotNetObjectReference.Create(this), nameof(HideMenuInterop));
    }

    [JSInvokable]
    public Task HideMenuInterop()
    {
        pagedResult.Items.ForEach(a => a.IsMenu = false);
        return InvokeAsync(StateHasChanged);
    }

    void ShowMenu(int id)
    {
        pagedResult.Items.ForEach(a => a.IsMenu = a.Id == id && !a.IsMenu);
    }

    private async Task ShowEditModal(int id)
    {
        Modal.Show<EditRequirement>("", BlazoredModalOptions.GetModalOptions());
    }

    private async Task ShowApproveModal(int id)
    {
        Modal.Show<ApprovalActivity>("", BlazoredModalOptions.GetModalOptions());
    }
    private async Task ShowDenyModal(int id)
    {
        Modal.Show<PopupDenyAct>("", BlazoredModalOptions.GetModalOptions());
    }
    private async Task ShowActPrivorModal(int id)
    {

        var result = Modal.Show<PriorActivity>("", BlazoredModalOptions.GetModalOptions()).Result;
    }

    private async Task ShowDeleteModal(int id)
    {
        Modal.Show(typeof(Pages.Organization.Profile.DeleteConfirm), "", BlazoredModalOptions.GetModalOptions());
    }
}
